
uart-proxy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080048b8  080048b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b8  080048b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000015c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4d6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7f  00000000  00000000  0002e516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff52  00000000  00000000  00031640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2fc  00000000  00000000  00051592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2871  00000000  00000000  0005f88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001220ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c3c  00000000  00000000  00122150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004834 	.word	0x08004834

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004834 	.word	0x08004834

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b08c      	sub	sp, #48	; 0x30
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fcbd 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f945 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fa91 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 fa5f 	bl	80006a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001ea:	f000 fa1d 	bl	8000628 <MX_I2C1_Init>
  MX_CAN_Init();
 80001ee:	f000 f99d 	bl	800052c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  volatile uint8_t buf[4];
  uint8_t send_ok[] = "CAN SEND OK\r\n";
 80001f2:	4b90      	ldr	r3, [pc, #576]	; (8000434 <main+0x260>)
 80001f4:	f107 0418 	add.w	r4, r7, #24
 80001f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001fa:	c407      	stmia	r4!, {r0, r1, r2}
 80001fc:	8023      	strh	r3, [r4, #0]
  uint8_t send_bad[] = "CAN SEND ERROR\r\n";
 80001fe:	4b8e      	ldr	r3, [pc, #568]	; (8000438 <main+0x264>)
 8000200:	1d3c      	adds	r4, r7, #4
 8000202:	461d      	mov	r5, r3
 8000204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000208:	682b      	ldr	r3, [r5, #0]
 800020a:	7023      	strb	r3, [r4, #0]
		//strcpy(buf, "ERROR!");
	//}


	//HAL_StatusTypeDef rcvSt =
	HAL_I2C_Slave_Receive(&hi2c1, &buf[0], 1, HAL_MAX_DELAY);
 800020c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000210:	f04f 33ff 	mov.w	r3, #4294967295
 8000214:	2201      	movs	r2, #1
 8000216:	4889      	ldr	r0, [pc, #548]	; (800043c <main+0x268>)
 8000218:	f001 feb7 	bl	8001f8a <HAL_I2C_Slave_Receive>
  	//strcpy(buf, "hello\n");
  	//HAL_UART_Transmit(&huart2, buf, 4, 200);
  	//HAL_UART_Transmit(&huart2, "\r\n", 3, 200);
	//HAL_UART_Transmit(&huart2, "first: ", sizeof("first: "), 200);
  	//HAL_UART_Transmit(&huart2, &buf[0], 1, 200);
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[1], 1, HAL_MAX_DELAY);
 800021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000220:	1c59      	adds	r1, r3, #1
 8000222:	f04f 33ff 	mov.w	r3, #4294967295
 8000226:	2201      	movs	r2, #1
 8000228:	4884      	ldr	r0, [pc, #528]	; (800043c <main+0x268>)
 800022a:	f001 feae 	bl	8001f8a <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", second: ", sizeof(", second:"), 200);
  	//HAL_UART_Transmit(&huart2, &buf[1], 1, 200);
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[2], 1, HAL_MAX_DELAY);
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	1c99      	adds	r1, r3, #2
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
 8000238:	2201      	movs	r2, #1
 800023a:	4880      	ldr	r0, [pc, #512]	; (800043c <main+0x268>)
 800023c:	f001 fea5 	bl	8001f8a <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", thrid: ", sizeof(", thrid: "), 200);
  	//HAL_UART_Transmit(&huart2, &buf[2], 1, 200);
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[3], 1, HAL_MAX_DELAY);
 8000240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000244:	1cd9      	adds	r1, r3, #3
 8000246:	f04f 33ff 	mov.w	r3, #4294967295
 800024a:	2201      	movs	r2, #1
 800024c:	487b      	ldr	r0, [pc, #492]	; (800043c <main+0x268>)
 800024e:	f001 fe9c 	bl	8001f8a <HAL_I2C_Slave_Receive>
// 1 - left blink
// 2 - right blink
// 3 - both blink


if (current_blink == 0 && buf[3] > 0) { // blink button pressed down
 8000252:	4b7b      	ldr	r3, [pc, #492]	; (8000440 <main+0x26c>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d14e      	bne.n	80002f8 <main+0x124>
 800025a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d049      	beq.n	80002f8 <main+0x124>
    if (blinking == 1 && buf[3] == 2) {
 8000264:	4b77      	ldr	r3, [pc, #476]	; (8000444 <main+0x270>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d10b      	bne.n	8000284 <main+0xb0>
 800026c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000270:	b2db      	uxtb	r3, r3
 8000272:	2b02      	cmp	r3, #2
 8000274:	d106      	bne.n	8000284 <main+0xb0>
        blinking = 2;
 8000276:	4b73      	ldr	r3, [pc, #460]	; (8000444 <main+0x270>)
 8000278:	2202      	movs	r2, #2
 800027a:	701a      	strb	r2, [r3, #0]
        blinkSend = 2;
 800027c:	4b72      	ldr	r3, [pc, #456]	; (8000448 <main+0x274>)
 800027e:	2202      	movs	r2, #2
 8000280:	701a      	strb	r2, [r3, #0]
 8000282:	e033      	b.n	80002ec <main+0x118>
    }
    else if (blinking == 1 && buf[3] == 1){
 8000284:	4b6f      	ldr	r3, [pc, #444]	; (8000444 <main+0x270>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d108      	bne.n	800029e <main+0xca>
 800028c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b01      	cmp	r3, #1
 8000294:	d103      	bne.n	800029e <main+0xca>
    	blinking = 0;
 8000296:	4b6b      	ldr	r3, [pc, #428]	; (8000444 <main+0x270>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
 800029c:	e026      	b.n	80002ec <main+0x118>
    }
    else if (blinking == 2 && buf[3] == 1){
 800029e:	4b69      	ldr	r3, [pc, #420]	; (8000444 <main+0x270>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	d10b      	bne.n	80002be <main+0xea>
 80002a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d106      	bne.n	80002be <main+0xea>
    	blinking = 1;
 80002b0:	4b64      	ldr	r3, [pc, #400]	; (8000444 <main+0x270>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	701a      	strb	r2, [r3, #0]
    	blinkSend = 1;
 80002b6:	4b64      	ldr	r3, [pc, #400]	; (8000448 <main+0x274>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	e016      	b.n	80002ec <main+0x118>
    }
    else if (blinking == 2 && buf[3] == 2){
 80002be:	4b61      	ldr	r3, [pc, #388]	; (8000444 <main+0x270>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d108      	bne.n	80002d8 <main+0x104>
 80002c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d103      	bne.n	80002d8 <main+0x104>
    	blinking = 0;
 80002d0:	4b5c      	ldr	r3, [pc, #368]	; (8000444 <main+0x270>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
 80002d6:	e009      	b.n	80002ec <main+0x118>
    }
    else {
        blinking = buf[3];
 80002d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b59      	ldr	r3, [pc, #356]	; (8000444 <main+0x270>)
 80002e0:	701a      	strb	r2, [r3, #0]
        blinkSend = buf[3];
 80002e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b57      	ldr	r3, [pc, #348]	; (8000448 <main+0x274>)
 80002ea:	701a      	strb	r2, [r3, #0]
    }
    current_blink = buf[3];
 80002ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b53      	ldr	r3, [pc, #332]	; (8000440 <main+0x26c>)
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e00b      	b.n	8000310 <main+0x13c>
} else if (current_blink > 0 && buf[3] == 0) { // blink button released
 80002f8:	4b51      	ldr	r3, [pc, #324]	; (8000440 <main+0x26c>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d007      	beq.n	8000310 <main+0x13c>
 8000300:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d102      	bne.n	8000310 <main+0x13c>
    current_blink = 0;
 800030a:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <main+0x26c>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}


if (blinking == 1 && currWheel >= LEFT_THOLD && buf[0] < LEFT_THOLD) {
 8000310:	4b4c      	ldr	r3, [pc, #304]	; (8000444 <main+0x270>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d10e      	bne.n	8000336 <main+0x162>
 8000318:	4b4c      	ldr	r3, [pc, #304]	; (800044c <main+0x278>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b56      	cmp	r3, #86	; 0x56
 800031e:	d90a      	bls.n	8000336 <main+0x162>
 8000320:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000324:	b2db      	uxtb	r3, r3
 8000326:	2b56      	cmp	r3, #86	; 0x56
 8000328:	d805      	bhi.n	8000336 <main+0x162>
    blinking = 0;
 800032a:	4b46      	ldr	r3, [pc, #280]	; (8000444 <main+0x270>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
    blinkSend = 0;
 8000330:	4b45      	ldr	r3, [pc, #276]	; (8000448 <main+0x274>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
}

if (blinking == 2 && currWheel <= RIGHT_THOLD && buf[0] > RIGHT_THOLD) {
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <main+0x270>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d10e      	bne.n	800035c <main+0x188>
 800033e:	4b43      	ldr	r3, [pc, #268]	; (800044c <main+0x278>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b43      	cmp	r3, #67	; 0x43
 8000344:	d80a      	bhi.n	800035c <main+0x188>
 8000346:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800034a:	b2db      	uxtb	r3, r3
 800034c:	2b43      	cmp	r3, #67	; 0x43
 800034e:	d905      	bls.n	800035c <main+0x188>
    blinking = 0;
 8000350:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <main+0x270>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
    blinkSend = 0;
 8000356:	4b3c      	ldr	r3, [pc, #240]	; (8000448 <main+0x274>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
}

currWheel = buf[0];
 800035c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b3a      	ldr	r3, [pc, #232]	; (800044c <main+0x278>)
 8000364:	701a      	strb	r2, [r3, #0]
  		currBlink = 0;
  	}
  	*/


	if(blinking > 0){
 8000366:	4b37      	ldr	r3, [pc, #220]	; (8000444 <main+0x270>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d01b      	beq.n	80003a6 <main+0x1d2>
		currBlinkCount ++;
 800036e:	4b38      	ldr	r3, [pc, #224]	; (8000450 <main+0x27c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <main+0x27c>)
 8000378:	701a      	strb	r2, [r3, #0]
		if(currBlinkCount >= maxBlinkCount){
 800037a:	4b35      	ldr	r3, [pc, #212]	; (8000450 <main+0x27c>)
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	4b35      	ldr	r3, [pc, #212]	; (8000454 <main+0x280>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d315      	bcc.n	80003b2 <main+0x1de>
			currBlinkCount = 0;
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <main+0x27c>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
			if(blinkSend == 0){
 800038c:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <main+0x274>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d104      	bne.n	800039e <main+0x1ca>
				blinkSend = blinking;
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <main+0x270>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <main+0x274>)
 800039a:	701a      	strb	r2, [r3, #0]
 800039c:	e009      	b.n	80003b2 <main+0x1de>
			}
			else{
				blinkSend = 0;
 800039e:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <main+0x274>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	e005      	b.n	80003b2 <main+0x1de>
			}
		}
	}
	else{
		currBlinkCount = 0;
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <main+0x27c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
		blinkSend = 0;
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <main+0x274>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
	}




  	TxData[0] = buf[0]; //Wheel Angle (25-125
 80003b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <main+0x284>)
 80003ba:	701a      	strb	r2, [r3, #0]
  	TxData[1] = buf[1]; // Throttle Angle (0-100)
 80003bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <main+0x284>)
 80003c4:	705a      	strb	r2, [r3, #1]
  	TxData[2] = buf[2]; // Brake (0-100)
 80003c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <main+0x284>)
 80003ce:	709a      	strb	r2, [r3, #2]
  	TxData[3] = blinkSend; // Blinkers (0, 1, 2)
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <main+0x274>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <main+0x284>)
 80003d6:	70da      	strb	r2, [r3, #3]

  	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <main+0x288>)
 80003da:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <main+0x284>)
 80003dc:	4920      	ldr	r1, [pc, #128]	; (8000460 <main+0x28c>)
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <main+0x290>)
 80003e0:	f000 fe4d 	bl	800107e <HAL_CAN_AddTxMessage>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d00a      	beq.n	8000400 <main+0x22c>
  	{

  	  //Transmission request Error

  		HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,send_bad,sizeof(send_bad),100);// Sending in normal mode
 80003ea:	1d39      	adds	r1, r7, #4
 80003ec:	2364      	movs	r3, #100	; 0x64
 80003ee:	2211      	movs	r2, #17
 80003f0:	481d      	ldr	r0, [pc, #116]	; (8000468 <main+0x294>)
 80003f2:	f003 fdd9 	bl	8003fa8 <HAL_UART_Transmit>
 80003f6:	4603      	mov	r3, r0
 80003f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		if (status == HAL_OK) {
  		}
  	  Error_Handler();
 80003fc:	f000 fa22 	bl	8000844 <Error_Handler>
  	}
  	HAL_Delay(10);
 8000400:	200a      	movs	r0, #10
 8000402:	f000 fc0f 	bl	8000c24 <HAL_Delay>
  	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,send_ok,sizeof(send_ok),100);// Sending in normal mode
 8000406:	f107 0118 	add.w	r1, r7, #24
 800040a:	2364      	movs	r3, #100	; 0x64
 800040c:	220e      	movs	r2, #14
 800040e:	4816      	ldr	r0, [pc, #88]	; (8000468 <main+0x294>)
 8000410:	f003 fdca 	bl	8003fa8 <HAL_UART_Transmit>
 8000414:	4603      	mov	r3, r0
 8000416:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  	if (status == HAL_OK) {
 800041a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800041e:	2b00      	cmp	r3, #0
 8000420:	f47f aef4 	bne.w	800020c <main+0x38>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2120      	movs	r1, #32
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f001 fd06 	bl	8001e3c <HAL_GPIO_WritePin>
  {
 8000430:	e6ec      	b.n	800020c <main+0x38>
 8000432:	bf00      	nop
 8000434:	0800484c 	.word	0x0800484c
 8000438:	0800485c 	.word	0x0800485c
 800043c:	20000054 	.word	0x20000054
 8000440:	20000164 	.word	0x20000164
 8000444:	20000165 	.word	0x20000165
 8000448:	20000167 	.word	0x20000167
 800044c:	20000000 	.word	0x20000000
 8000450:	20000166 	.word	0x20000166
 8000454:	20000001 	.word	0x20000001
 8000458:	20000158 	.word	0x20000158
 800045c:	20000160 	.word	0x20000160
 8000460:	20000124 	.word	0x20000124
 8000464:	2000002c 	.word	0x2000002c
 8000468:	200000a0 	.word	0x200000a0

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0a6      	sub	sp, #152	; 0x98
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000476:	2228      	movs	r2, #40	; 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f004 f9d2 	bl	8004824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2258      	movs	r2, #88	; 0x58
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f004 f9c4 	bl	8004824 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049c:	2302      	movs	r3, #2
 800049e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	2301      	movs	r3, #1
 80004a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a4:	2310      	movs	r3, #16
 80004a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 f876 	bl	80025bc <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f9b5 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2302      	movs	r3, #2
 80004e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f4:	2102      	movs	r1, #2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 f8b4 	bl	8003664 <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000502:	f000 f99f 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000506:	2322      	movs	r3, #34	; 0x22
 8000508:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fadb 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000520:	f000 f990 	bl	8000844 <Error_Handler>
  }
}
 8000524:	bf00      	nop
 8000526:	3798      	adds	r7, #152	; 0x98
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000532:	4b3a      	ldr	r3, [pc, #232]	; (800061c <MX_CAN_Init+0xf0>)
 8000534:	4a3a      	ldr	r2, [pc, #232]	; (8000620 <MX_CAN_Init+0xf4>)
 8000536:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000538:	4b38      	ldr	r3, [pc, #224]	; (800061c <MX_CAN_Init+0xf0>)
 800053a:	2210      	movs	r2, #16
 800053c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b37      	ldr	r3, [pc, #220]	; (800061c <MX_CAN_Init+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b35      	ldr	r3, [pc, #212]	; (800061c <MX_CAN_Init+0xf0>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <MX_CAN_Init+0xf0>)
 800054c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000550:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <MX_CAN_Init+0xf0>)
 8000554:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000558:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <MX_CAN_Init+0xf0>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000560:	4b2e      	ldr	r3, [pc, #184]	; (800061c <MX_CAN_Init+0xf0>)
 8000562:	2200      	movs	r2, #0
 8000564:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_CAN_Init+0xf0>)
 8000568:	2200      	movs	r2, #0
 800056a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <MX_CAN_Init+0xf0>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_CAN_Init+0xf0>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <MX_CAN_Init+0xf0>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800057e:	4827      	ldr	r0, [pc, #156]	; (800061c <MX_CAN_Init+0xf0>)
 8000580:	f000 fb74 	bl	8000c6c <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800058a:	f000 f95b 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	sFilterConfig.FilterIdHigh = 0x0000;
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <MX_CAN_Init+0xf0>)
 80005bc:	f000 fc51 	bl	8000e62 <HAL_CAN_ConfigFilter>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_CAN_Init+0x9e>
	  {
		/* Filter configuration Error */
		Error_Handler();
 80005c6:	f000 f93d 	bl	8000844 <Error_Handler>
	  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <MX_CAN_Init+0xf0>)
 80005cc:	f000 fd13 	bl	8000ff6 <HAL_CAN_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_CAN_Init+0xae>
  {
	/* Start Error */
	Error_Handler();
 80005d6:	f000 f935 	bl	8000844 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005da:	2102      	movs	r1, #2
 80005dc:	480f      	ldr	r0, [pc, #60]	; (800061c <MX_CAN_Init+0xf0>)
 80005de:	f000 ff3b 	bl	8001458 <HAL_CAN_ActivateNotification>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_CAN_Init+0xc0>
  {
	/* Notification Error */
	Error_Handler();
 80005e8:	f000 f92c 	bl	8000844 <Error_Handler>
  }

  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = 0x320;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_CAN_Init+0xf8>)
 80005ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005f2:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_CAN_Init+0xf8>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_CAN_Init+0xf8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_CAN_Init+0xf8>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_CAN_Init+0xf8>)
 8000608:	2204      	movs	r2, #4
 800060a:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MX_CAN_Init+0xf8>)
 800060e:	2200      	movs	r2, #0
 8000610:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000002c 	.word	0x2000002c
 8000620:	40006400 	.word	0x40006400
 8000624:	20000124 	.word	0x20000124

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <MX_I2C1_Init+0x74>)
 8000664:	f001 fc02 	bl	8001e6c <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 f8e9 	bl	8000844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <MX_I2C1_Init+0x74>)
 8000676:	f001 ff09 	bl	800248c <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 f8e0 	bl	8000844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2C1_Init+0x74>)
 8000688:	f001 ff4b 	bl	8002522 <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f8d7 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000054 	.word	0x20000054
 80006a0:	40005400 	.word	0x40005400
 80006a4:	2000090e 	.word	0x2000090e

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART2_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ec:	f003 fc0e 	bl	8003f0c <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f8a5 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000a0 	.word	0x200000a0
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xc4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <MX_GPIO_Init+0xc4>)
 800073c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_GPIO_Init+0xc4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_GPIO_Init+0xc4>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f001 fb59 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000790:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0xc8>)
 80007a2:	f001 f9c1 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f001 f9b2 	bl	8001b28 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800

080007d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 fd26 	bl	8001234 <HAL_CAN_GetRxMessage>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80007ee:	f000 f829 	bl	8000844 <Error_Handler>
  }

  /* Display LEDx */
  if ((RxHeader.StdId == 0x321))
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f240 3221 	movw	r2, #801	; 0x321
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d107      	bne.n	800080e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,RxData[0]);
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f001 fb17 	bl	8001e3c <HAL_GPIO_WritePin>
  }
  uint8_t can_rcv[] = "CAN RCV OK\r\n";
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000810:	f107 0408 	add.w	r4, r7, #8
 8000814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000816:	c407      	stmia	r4!, {r0, r1, r2}
 8000818:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef status1 = HAL_UART_Transmit(&huart2,can_rcv,sizeof(can_rcv),100);// Sending in normal mode
 800081a:	f107 0108 	add.w	r1, r7, #8
 800081e:	2364      	movs	r3, #100	; 0x64
 8000820:	220d      	movs	r2, #13
 8000822:	4807      	ldr	r0, [pc, #28]	; (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000824:	f003 fbc0 	bl	8003fa8 <HAL_UART_Transmit>
 8000828:	4603      	mov	r3, r0
 800082a:	75fb      	strb	r3, [r7, #23]
	}

	if (RxHeader.StdId == 0x322) {

	}
}
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	2000015c 	.word	0x2000015c
 8000838:	2000013c 	.word	0x2000013c
 800083c:	08004870 	.word	0x08004870
 8000840:	200000a0 	.word	0x200000a0

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f001 f90c 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <HAL_CAN_MspInit+0x90>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d131      	bne.n	800091e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a1b      	ldr	r2, [pc, #108]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_CAN_MspInit+0x94>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80008fc:	2309      	movs	r3, #9
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f001 f90d 	bl	8001b28 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2014      	movs	r0, #20
 8000914:	f001 f8d1 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000918:	2014      	movs	r0, #20
 800091a:	f001 f8ea 	bl	8001af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40006400 	.word	0x40006400
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <HAL_I2C_MspInit+0xb8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d145      	bne.n	80009de <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a25      	ldr	r2, [pc, #148]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f001 f8c1 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009aa:	2312      	movs	r3, #18
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b6:	2304      	movs	r3, #4
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <HAL_I2C_MspInit+0xc0>)
 80009c2:	f001 f8b1 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 80009cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40005400 	.word	0x40005400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x7c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d128      	bne.n	8000a68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_UART_MspInit+0x80>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a56:	2307      	movs	r3, #7
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 f860 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f88e 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000ad2:	f000 fce7 	bl	80014a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000002c 	.word	0x2000002c

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fe53 	bl	80047dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fb4d 	bl	80001d4 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b48:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 8000b4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b50:	2000016c 	.word	0x2000016c

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x28>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 ff9b 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fe6c 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 ffb3 	bl	8001b0e <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 ff7b 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2000000c 	.word	0x2000000c
 8000c08:	20000168 	.word	0x20000168

08000c0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000168 	.word	0x20000168

08000c24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0ed      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fe04 	bl	8000898 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff ffb4 	bl	8000c0c <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ca6:	e012      	b.n	8000cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca8:	f7ff ffb0 	bl	8000c0c <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d90b      	bls.n	8000cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0c5      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0e5      	beq.n	8000ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0202 	bic.w	r2, r2, #2
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ff8e 	bl	8000c0c <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ff8a 	bl	8000c0c <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e09f      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e5      	bne.n	8000cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e5b      	ldrb	r3, [r3, #25]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e9b      	ldrb	r3, [r3, #26]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0220 	bic.w	r2, r2, #32
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7edb      	ldrb	r3, [r3, #27]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0210 	bic.w	r2, r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0208 	orr.w	r2, r2, #8
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0208 	bic.w	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f5b      	ldrb	r3, [r3, #29]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b087      	sub	sp, #28
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d003      	beq.n	8000e88 <HAL_CAN_ConfigFilter+0x26>
 8000e80:	7cfb      	ldrb	r3, [r7, #19]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	f040 80aa 	bne.w	8000fdc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e8e:	f043 0201 	orr.w	r2, r3, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d123      	bne.n	8000f0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ee4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3248      	adds	r2, #72	; 0x48
 8000eea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000efe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f00:	6979      	ldr	r1, [r7, #20]
 8000f02:	3348      	adds	r3, #72	; 0x48
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	440b      	add	r3, r1
 8000f08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d122      	bne.n	8000f58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3248      	adds	r2, #72	; 0x48
 8000f38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f4e:	6979      	ldr	r1, [r7, #20]
 8000f50:	3348      	adds	r3, #72	; 0x48
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f72:	e007      	b.n	8000f84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f9e:	e007      	b.n	8000fb0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fce:	f023 0201 	bic.w	r2, r3, #1
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e006      	b.n	8000fea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
  }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d12e      	bne.n	8001068 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2202      	movs	r2, #2
 800100e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0201 	bic.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001022:	f7ff fdf3 	bl	8000c0c <HAL_GetTick>
 8001026:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001028:	e012      	b.n	8001050 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102a:	f7ff fdef 	bl	8000c0c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b0a      	cmp	r3, #10
 8001036:	d90b      	bls.n	8001050 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2205      	movs	r2, #5
 8001048:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e012      	b.n	8001076 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1e5      	bne.n	800102a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	e006      	b.n	8001076 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
  }
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800107e:	b480      	push	{r7}
 8001080:	b089      	sub	sp, #36	; 0x24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001092:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d003      	beq.n	80010aa <HAL_CAN_AddTxMessage+0x2c>
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	f040 80b8 	bne.w	800121a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10a      	bne.n	80010ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a0 	beq.w	800120a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	0e1b      	lsrs	r3, r3, #24
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d907      	bls.n	80010ea <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e09e      	b.n	8001228 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10d      	bne.n	8001118 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001106:	68f9      	ldr	r1, [r7, #12]
 8001108:	6809      	ldr	r1, [r1, #0]
 800110a:	431a      	orrs	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3318      	adds	r3, #24
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	440b      	add	r3, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e00f      	b.n	8001138 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001122:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800112c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3318      	adds	r3, #24
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6819      	ldr	r1, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3318      	adds	r3, #24
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	440b      	add	r3, r1
 8001148:	3304      	adds	r3, #4
 800114a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	7d1b      	ldrb	r3, [r3, #20]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d111      	bne.n	8001178 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3318      	adds	r3, #24
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	3304      	adds	r3, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	6811      	ldr	r1, [r2, #0]
 8001168:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3318      	adds	r3, #24
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	440b      	add	r3, r1
 8001174:	3304      	adds	r3, #4
 8001176:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3307      	adds	r3, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	061a      	lsls	r2, r3, #24
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3306      	adds	r3, #6
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	041b      	lsls	r3, r3, #16
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3305      	adds	r3, #5
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	4313      	orrs	r3, r2
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	3204      	adds	r2, #4
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	4610      	mov	r0, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	6811      	ldr	r1, [r2, #0]
 80011a0:	ea43 0200 	orr.w	r2, r3, r0
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3303      	adds	r3, #3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	061a      	lsls	r2, r3, #24
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3302      	adds	r3, #2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3301      	adds	r3, #1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	4313      	orrs	r3, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	4610      	mov	r0, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	ea43 0200 	orr.w	r2, r3, r0
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3318      	adds	r3, #24
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	6811      	ldr	r1, [r2, #0]
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3318      	adds	r3, #24
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	440b      	add	r3, r1
 8001204:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e00e      	b.n	8001228 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e006      	b.n	8001228 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
  }
}
 8001228:	4618      	mov	r0, r3
 800122a:	3724      	adds	r7, #36	; 0x24
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001248:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d003      	beq.n	8001258 <HAL_CAN_GetRxMessage+0x24>
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b02      	cmp	r3, #2
 8001254:	f040 80f3 	bne.w	800143e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10e      	bne.n	800127c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d116      	bne.n	800129a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0e7      	b.n	800144c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d107      	bne.n	800129a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0d8      	b.n	800144c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	331b      	adds	r3, #27
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0204 	and.w	r2, r3, #4
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10c      	bne.n	80012d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	331b      	adds	r3, #27
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	4413      	add	r3, r2
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0d5b      	lsrs	r3, r3, #21
 80012c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e00b      	b.n	80012ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	331b      	adds	r3, #27
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	331b      	adds	r3, #27
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0202 	and.w	r2, r3, #2
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	331b      	adds	r3, #27
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	3304      	adds	r3, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 020f 	and.w	r2, r3, #15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	331b      	adds	r3, #27
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	b2da      	uxtb	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	331b      	adds	r3, #27
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	4413      	add	r3, r2
 800133c:	3304      	adds	r3, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	0a1a      	lsrs	r2, r3, #8
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0c1a      	lsrs	r2, r3, #16
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3302      	adds	r3, #2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0e1a      	lsrs	r2, r3, #24
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3303      	adds	r3, #3
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3304      	adds	r3, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0a1a      	lsrs	r2, r3, #8
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3305      	adds	r3, #5
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0c1a      	lsrs	r2, r3, #16
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3306      	adds	r3, #6
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0e1a      	lsrs	r2, r3, #24
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3307      	adds	r3, #7
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d108      	bne.n	800142a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0220 	orr.w	r2, r2, #32
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	e007      	b.n	800143a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e006      	b.n	800144c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001468:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d002      	beq.n	8001476 <HAL_CAN_ActivateNotification+0x1e>
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d109      	bne.n	800148a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6959      	ldr	r1, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e006      	b.n	8001498 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d07c      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f983 	bl	8001812 <HAL_CAN_TxMailbox0CompleteCallback>
 800150c:	e016      	b.n	800153c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
 8001520:	e00c      	b.n	800153c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
 8001534:	e002      	b.n	800153c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f989 	bl	800184e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d024      	beq.n	8001590 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f963 	bl	8001826 <HAL_CAN_TxMailbox1CompleteCallback>
 8001560:	e016      	b.n	8001590 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
 8001574:	e00c      	b.n	8001590 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	e002      	b.n	8001590 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f969 	bl	8001862 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d024      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f943 	bl	800183a <HAL_CAN_TxMailbox2CompleteCallback>
 80015b4:	e016      	b.n	80015e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	e00c      	b.n	80015e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
 80015dc:	e002      	b.n	80015e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f949 	bl	8001876 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2210      	movs	r2, #16
 8001606:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2208      	movs	r2, #8
 8001622:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f930 	bl	800188a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d009      	beq.n	8001648 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff f8c6 	bl	80007d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00c      	beq.n	800166c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2210      	movs	r2, #16
 800166a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2208      	movs	r2, #8
 8001686:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f912 	bl	80018b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	d009      	beq.n	80016ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8f9 	bl	800189e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2210      	movs	r2, #16
 80016c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8fc 	bl	80018c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00b      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2208      	movs	r2, #8
 80016e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8f5 	bl	80018da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d07b      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d072      	beq.n	80017ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800175e:	2b00      	cmp	r3, #0
 8001760:	d043      	beq.n	80017ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d03e      	beq.n	80017ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001772:	2b60      	cmp	r3, #96	; 0x60
 8001774:	d02b      	beq.n	80017ce <HAL_CAN_IRQHandler+0x32a>
 8001776:	2b60      	cmp	r3, #96	; 0x60
 8001778:	d82e      	bhi.n	80017d8 <HAL_CAN_IRQHandler+0x334>
 800177a:	2b50      	cmp	r3, #80	; 0x50
 800177c:	d022      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x320>
 800177e:	2b50      	cmp	r3, #80	; 0x50
 8001780:	d82a      	bhi.n	80017d8 <HAL_CAN_IRQHandler+0x334>
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d019      	beq.n	80017ba <HAL_CAN_IRQHandler+0x316>
 8001786:	2b40      	cmp	r3, #64	; 0x40
 8001788:	d826      	bhi.n	80017d8 <HAL_CAN_IRQHandler+0x334>
 800178a:	2b30      	cmp	r3, #48	; 0x30
 800178c:	d010      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x30c>
 800178e:	2b30      	cmp	r3, #48	; 0x30
 8001790:	d822      	bhi.n	80017d8 <HAL_CAN_IRQHandler+0x334>
 8001792:	2b10      	cmp	r3, #16
 8001794:	d002      	beq.n	800179c <HAL_CAN_IRQHandler+0x2f8>
 8001796:	2b20      	cmp	r3, #32
 8001798:	d005      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800179a:	e01d      	b.n	80017d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017a4:	e019      	b.n	80017da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017ae:	e014      	b.n	80017da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017b8:	e00f      	b.n	80017da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c2:	e00a      	b.n	80017da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017cc:	e005      	b.n	80017da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d6:	e000      	b.n	80017da <HAL_CAN_IRQHandler+0x336>
            break;
 80017d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f872 	bl	80018ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff3e 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff31 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e160      	b.n	8001dfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8152 	beq.w	8001df4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d017      	beq.n	8001c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d123      	bne.n	8001c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	6939      	ldr	r1, [r7, #16]
 8001c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0203 	and.w	r2, r3, #3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80ac 	beq.w	8001df4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9c:	4b5e      	ldr	r3, [pc, #376]	; (8001e18 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a5d      	ldr	r2, [pc, #372]	; (8001e18 <HAL_GPIO_Init+0x2f0>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_GPIO_Init+0x2f0>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb4:	4a59      	ldr	r2, [pc, #356]	; (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cde:	d025      	beq.n	8001d2c <HAL_GPIO_Init+0x204>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <HAL_GPIO_Init+0x2f8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d01f      	beq.n	8001d28 <HAL_GPIO_Init+0x200>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_GPIO_Init+0x2fc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d019      	beq.n	8001d24 <HAL_GPIO_Init+0x1fc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x300>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_GPIO_Init+0x1f8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1f4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x308>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1f0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_GPIO_Init+0x30c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1ec>
 8001d10:	2306      	movs	r3, #6
 8001d12:	e00c      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d14:	2307      	movs	r3, #7
 8001d16:	e00a      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d18:	2305      	movs	r3, #5
 8001d1a:	e008      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e006      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d20:	2303      	movs	r3, #3
 8001d22:	e004      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e002      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	f002 0203 	and.w	r2, r2, #3
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	4093      	lsls	r3, r2
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3e:	4937      	ldr	r1, [pc, #220]	; (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d70:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d76:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f47f ae97 	bne.w	8001b38 <HAL_GPIO_Init+0x10>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	48000800 	.word	0x48000800
 8001e28:	48000c00 	.word	0x48000c00
 8001e2c:	48001000 	.word	0x48001000
 8001e30:	48001400 	.word	0x48001400
 8001e34:	48001800 	.word	0x48001800
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e081      	b.n	8001f82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fd4c 	bl	8000930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ebc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ecc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	e006      	b.n	8001ef4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ef2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d104      	bne.n	8001f06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69d9      	ldr	r1, [r3, #28]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b088      	sub	sp, #32
 8001f8e:	af02      	add	r7, sp, #8
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	f040 80eb 	bne.w	800217e <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_I2C_Slave_Receive+0x2a>
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0df      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2C_Slave_Receive+0x44>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e0d8      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd6:	f7fe fe19 	bl	8000c0c <HAL_GetTick>
 8001fda:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2222      	movs	r2, #34	; 0x22
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002012:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	2108      	movs	r1, #8
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f8d6 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002038:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0a0      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2208      	movs	r2, #8
 8002044:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f8bc 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d048      	beq.n	80020f0 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e086      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f926 	bl	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d023      	beq.n	80020ca <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002090:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b04      	cmp	r3, #4
 800209e:	d112      	bne.n	80020c6 <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e05a      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1bb      	bne.n	8002072 <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8a6 	bl	8002250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002118:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e030      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2220      	movs	r2, #32
 8002124:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f84c 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800214c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e016      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002160:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 800217e:	2302      	movs	r3, #2
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d103      	bne.n	80021a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d007      	beq.n	80021c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	619a      	str	r2, [r3, #24]
  }
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e0:	e022      	b.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d01e      	beq.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7fe fd0f 	bl	8000c0c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d113      	bne.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0220 	orr.w	r2, r3, #32
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00f      	b.n	8002248 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	429a      	cmp	r2, r3
 8002244:	d0cd      	beq.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225c:	e028      	b.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f89c 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e026      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7fe fccb 	bl	8000c0c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d302      	bcc.n	8002288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e007      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d1cf      	bne.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022d4:	e055      	b.n	8002382 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f860 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e053      	b.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d129      	bne.n	800234c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d105      	bne.n	8002312 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e03f      	b.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2220      	movs	r2, #32
 8002318:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002326:	400b      	ands	r3, r1
 8002328:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e022      	b.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234c:	f7fe fc5e 	bl	8000c0c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	d302      	bcc.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e007      	b.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d1a2      	bne.n	80022d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	fe00e800 	.word	0xfe00e800

080023a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d161      	bne.n	800247e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c8:	d02b      	beq.n	8002422 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023da:	e022      	b.n	8002422 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d01e      	beq.n	8002422 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e4:	f7fe fc12 	bl	8000c0c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <I2C_IsAcknowledgeFailed+0x5a>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d113      	bne.n	8002422 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02e      	b.n	8002480 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b20      	cmp	r3, #32
 800242e:	d1d5      	bne.n	80023dc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2210      	movs	r2, #16
 8002436:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff fea1 	bl	8002188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <I2C_IsAcknowledgeFailed+0xe8>)
 8002452:	400b      	ands	r3, r1
 8002454:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f043 0204 	orr.w	r2, r3, #4
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	fe00e800 	.word	0xfe00e800

0800248c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d138      	bne.n	8002514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e032      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d139      	bne.n	80025ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002542:	2302      	movs	r3, #2
 8002544:	e033      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	; 0x24
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f001 b83a 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 816f 	beq.w	80028d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025f8:	4bb5      	ldr	r3, [pc, #724]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d00c      	beq.n	800261e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002604:	4bb2      	ldr	r3, [pc, #712]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d15c      	bne.n	80026ca <HAL_RCC_OscConfig+0x10e>
 8002610:	4baf      	ldr	r3, [pc, #700]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d155      	bne.n	80026ca <HAL_RCC_OscConfig+0x10e>
 800261e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002622:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002632:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x94>
 800264a:	4ba1      	ldr	r3, [pc, #644]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e015      	b.n	800267c <HAL_RCC_OscConfig+0xc0>
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002668:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800266c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002678:	4b95      	ldr	r3, [pc, #596]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002680:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002684:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002688:	fa92 f2a2 	rbit	r2, r2
 800268c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002690:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f042 0220 	orr.w	r2, r2, #32
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f002 021f 	and.w	r2, r2, #31
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f202 	lsl.w	r2, r1, r2
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8111 	beq.w	80028d4 <HAL_RCC_OscConfig+0x318>
 80026b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 8108 	bne.w	80028d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f000 bfc6 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x12e>
 80026dc:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7b      	ldr	r2, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e036      	b.n	8002758 <HAL_RCC_OscConfig+0x19c>
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x158>
 80026fa:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a71      	ldr	r2, [pc, #452]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e021      	b.n	8002758 <HAL_RCC_OscConfig+0x19c>
 8002714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002718:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x184>
 8002726:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x19c>
 8002740:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a62      	ldr	r2, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5f      	ldr	r2, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d059      	beq.n	800281c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fa50 	bl	8000c0c <HAL_GetTick>
 800276c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002772:	f7fe fa4b 	bl	8000c0c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d902      	bls.n	8002788 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	f000 bf67 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800279c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0x1fe>
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x22a>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80027ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80027ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80027fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ab      	beq.n	8002772 <HAL_RCC_OscConfig+0x1b6>
 800281a:	e05c      	b.n	80028d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe f9f6 	bl	8000c0c <HAL_GetTick>
 8002820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002826:	f7fe f9f1 	bl	8000c0c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d902      	bls.n	800283c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	f000 bf0d 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
 800283c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002840:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002850:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d102      	bne.n	800286e <HAL_RCC_OscConfig+0x2b2>
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x2de>
 800286e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002872:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002886:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800288a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x314>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80028a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80028a6:	fa92 f2a2 	rbit	r2, r2
 80028aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80028ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028b2:	fab2 f282 	clz	r2, r2
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	f042 0220 	orr.w	r2, r2, #32
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f002 021f 	and.w	r2, r2, #31
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ab      	bne.n	8002826 <HAL_RCC_OscConfig+0x26a>
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_OscConfig+0x31a>
 80028d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 817f 	beq.w	8002bea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028ec:	4ba7      	ldr	r3, [pc, #668]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00c      	beq.n	8002912 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028f8:	4ba4      	ldr	r3, [pc, #656]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d173      	bne.n	80029ec <HAL_RCC_OscConfig+0x430>
 8002904:	4ba1      	ldr	r3, [pc, #644]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002910:	d16c      	bne.n	80029ec <HAL_RCC_OscConfig+0x430>
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002924:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x386>
 800293c:	4b93      	ldr	r3, [pc, #588]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	e013      	b.n	800296a <HAL_RCC_OscConfig+0x3ae>
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800295a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002966:	4b89      	ldr	r3, [pc, #548]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2202      	movs	r2, #2
 800296c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002970:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800297c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3f6>
 800299c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d002      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f000 be52 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	21f8      	movs	r1, #248	; 0xf8
 80029c8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80029d0:	fa91 f1a1 	rbit	r1, r1
 80029d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80029d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029dc:	fab1 f181 	clz	r1, r1
 80029e0:	b2c9      	uxtb	r1, r1
 80029e2:	408b      	lsls	r3, r1
 80029e4:	4969      	ldr	r1, [pc, #420]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	e0fe      	b.n	8002bea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8088 	beq.w	8002b0e <HAL_RCC_OscConfig+0x552>
 80029fe:	2301      	movs	r3, #1
 8002a00:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002a10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	461a      	mov	r2, r3
 8002a26:	2301      	movs	r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe f8ef 	bl	8000c0c <HAL_GetTick>
 8002a2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe f8ea 	bl	8000c0c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d902      	bls.n	8002a4a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	f000 be06 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a5c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4be>
 8002a74:	4b45      	ldr	r3, [pc, #276]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	e013      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e6>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002aa8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002aac:	fa92 f2a2 	rbit	r2, r2
 8002ab0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002ab4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ab8:	fab2 f282 	clz	r2, r2
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f042 0220 	orr.w	r2, r2, #32
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f002 021f 	and.w	r2, r2, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0af      	beq.n	8002a34 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	21f8      	movs	r1, #248	; 0xf8
 8002aea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002af2:	fa91 f1a1 	rbit	r1, r1
 8002af6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002afa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002afe:	fab1 f181 	clz	r1, r1
 8002b02:	b2c9      	uxtb	r1, r1
 8002b04:	408b      	lsls	r3, r1
 8002b06:	4921      	ldr	r1, [pc, #132]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e06d      	b.n	8002bea <HAL_RCC_OscConfig+0x62e>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002b20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe f867 	bl	8000c0c <HAL_GetTick>
 8002b3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b44:	f7fe f862 	bl	8000c0c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d902      	bls.n	8002b5a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f000 bd7e 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5d4>
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <HAL_RCC_OscConfig+0x5d0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e016      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5fc>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	2302      	movs	r3, #2
 8002b92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ba8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bb4:	4bbf      	ldr	r3, [pc, #764]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002bbe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002bc2:	fa92 f2a2 	rbit	r2, r2
 8002bc6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002bca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f042 0220 	orr.w	r2, r2, #32
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f002 021f 	and.w	r2, r2, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ac      	bne.n	8002b44 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8113 	beq.w	8002e26 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d07c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x74e>
 8002c10:	2301      	movs	r3, #1
 8002c12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4ba2      	ldr	r3, [pc, #648]	; (8002eb8 <HAL_RCC_OscConfig+0x8fc>)
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	2301      	movs	r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fd ffe7 	bl	8000c0c <HAL_GetTick>
 8002c3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fd ffe2 	bl	8000c0c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	f000 bcfe 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f1a3 	rbit	r1, r3
 8002cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ce0:	6019      	str	r1, [r3, #0]
  return result;
 8002ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d09d      	beq.n	8002c44 <HAL_RCC_OscConfig+0x688>
 8002d08:	e08d      	b.n	8002e26 <HAL_RCC_OscConfig+0x86a>
 8002d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d2c:	601a      	str	r2, [r3, #0]
  return result;
 8002d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCC_OscConfig+0x8fc>)
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	461a      	mov	r2, r3
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fd ff5e 	bl	8000c0c <HAL_GetTick>
 8002d50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fd ff59 	bl	8000c0c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d902      	bls.n	8002d6c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	f000 bc75 	b.w	8003656 <HAL_RCC_OscConfig+0x109a>
 8002d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d74:	2202      	movs	r2, #2
 8002d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d98:	2202      	movs	r2, #2
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dd6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002de4:	2102      	movs	r1, #2
 8002de6:	6019      	str	r1, [r3, #0]
 8002de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f1a3 	rbit	r1, r3
 8002df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dfe:	6019      	str	r1, [r3, #0]
  return result;
 8002e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d197      	bne.n	8002d56 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 81a5 	beq.w	8003186 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_RCC_OscConfig+0x8f8>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_RCC_OscConfig+0x900>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d121      	bne.n	8002ecc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x900>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_RCC_OscConfig+0x900>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e94:	f7fd feba 	bl	8000c0c <HAL_GetTick>
 8002e98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e010      	b.n	8002ec0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fd feb5 	bl	8000c0c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e3d1      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	10908120 	.word	0x10908120
 8002ebc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <HAL_RCC_OscConfig+0xb3c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0e8      	beq.n	8002e9e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x92e>
 8002edc:	4b87      	ldr	r3, [pc, #540]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a86      	ldr	r2, [pc, #536]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_OscConfig+0x99a>
 8002eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x958>
 8002efa:	4b80      	ldr	r3, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a7f      	ldr	r2, [pc, #508]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	e020      	b.n	8002f56 <HAL_RCC_OscConfig+0x99a>
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x982>
 8002f24:	4b75      	ldr	r3, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a74      	ldr	r2, [pc, #464]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	4b72      	ldr	r3, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a71      	ldr	r2, [pc, #452]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x99a>
 8002f3e:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a6e      	ldr	r2, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a6b      	ldr	r2, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8081 	beq.w	800306a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fd fe50 	bl	8000c0c <HAL_GetTick>
 8002f6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fd fe4b 	bl	8000c0c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e365      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
 8002f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f2a3 	rbit	r2, r3
 8002fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fcc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fd0:	601a      	str	r2, [r3, #0]
  return result;
 8002fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_OscConfig+0xa3a>
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	e013      	b.n	800301e <HAL_RCC_OscConfig+0xa62>
 8002ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fa93 f2a3 	rbit	r2, r3
 8003010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003014:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	4b38      	ldr	r3, [pc, #224]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003022:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003026:	2102      	movs	r1, #2
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800302e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	fa92 f1a2 	rbit	r1, r2
 8003038:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800303c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003040:	6011      	str	r1, [r2, #0]
  return result;
 8003042:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003046:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	fab2 f282 	clz	r2, r2
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	f002 021f 	and.w	r2, r2, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f202 	lsl.w	r2, r1, r2
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d084      	beq.n	8002f72 <HAL_RCC_OscConfig+0x9b6>
 8003068:	e083      	b.n	8003172 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fd fdcf 	bl	8000c0c <HAL_GetTick>
 800306e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fd fdca 	bl	8000c0c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e2e4      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030b8:	2202      	movs	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030d2:	601a      	str	r2, [r3, #0]
  return result;
 80030d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0xb44>
 80030f2:	4b02      	ldr	r3, [pc, #8]	; (80030fc <HAL_RCC_OscConfig+0xb40>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	e017      	b.n	8003128 <HAL_RCC_OscConfig+0xb6c>
 80030f8:	40007000 	.word	0x40007000
 80030fc:	40021000 	.word	0x40021000
 8003100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003104:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003110:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	4bb3      	ldr	r3, [pc, #716]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800312c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003130:	2102      	movs	r1, #2
 8003132:	6011      	str	r1, [r2, #0]
 8003134:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003138:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	fa92 f1a2 	rbit	r1, r2
 8003142:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003146:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800314a:	6011      	str	r1, [r2, #0]
  return result;
 800314c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003150:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f002 021f 	and.w	r2, r2, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d180      	bne.n	8003074 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003172:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b9e      	ldr	r3, [pc, #632]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a9d      	ldr	r2, [pc, #628]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 825e 	beq.w	8003654 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003198:	4b96      	ldr	r3, [pc, #600]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f000 821f 	beq.w	80035e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	f040 8170 	bne.w	8003498 <HAL_RCC_OscConfig+0xedc>
 80031b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031dc:	601a      	str	r2, [r3, #0]
  return result;
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031e6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fd fd05 	bl	8000c0c <HAL_GetTick>
 8003202:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	e009      	b.n	800321c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fd fd00 	bl	8000c0c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e21c      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
 800321c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003220:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003224:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003240:	601a      	str	r2, [r3, #0]
  return result;
 8003242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003246:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800324a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_RCC_OscConfig+0xcaa>
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e027      	b.n	80032b6 <HAL_RCC_OscConfig+0xcfa>
 8003266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800326e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003286:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003290:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f2a3 	rbit	r2, r3
 80032a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032c2:	6011      	str	r1, [r2, #0]
 80032c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	fa92 f1a2 	rbit	r1, r2
 80032d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032d6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80032da:	6011      	str	r1, [r2, #0]
  return result;
 80032dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032e0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	fab2 f282 	clz	r2, r2
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	f042 0220 	orr.w	r2, r2, #32
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f002 021f 	and.w	r2, r2, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f202 	lsl.w	r2, r1, r2
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d182      	bne.n	8003208 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f023 020f 	bic.w	r2, r3, #15
 800330a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	4937      	ldr	r1, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 8003318:	4313      	orrs	r3, r2
 800331a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003328:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a19      	ldr	r1, [r3, #32]
 8003330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	430b      	orrs	r3, r1
 800333e:	492d      	ldr	r1, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
 8003344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003348:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800334c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003356:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003364:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003368:	601a      	str	r2, [r3, #0]
  return result;
 800336a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800336e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003372:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800337e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	461a      	mov	r2, r3
 8003386:	2301      	movs	r3, #1
 8003388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fd fc3f 	bl	8000c0c <HAL_GetTick>
 800338e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003392:	e009      	b.n	80033a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd fc3a 	bl	8000c0c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e156      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
 80033a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033cc:	601a      	str	r2, [r3, #0]
  return result;
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0xe3c>
 80033ec:	4b01      	ldr	r3, [pc, #4]	; (80033f4 <HAL_RCC_OscConfig+0xe38>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	e02a      	b.n	8003448 <HAL_RCC_OscConfig+0xe8c>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003418:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003422:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003430:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4b86      	ldr	r3, [pc, #536]	; (8003660 <HAL_RCC_OscConfig+0x10a4>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800344c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003450:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003454:	6011      	str	r1, [r2, #0]
 8003456:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800345a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	fa92 f1a2 	rbit	r1, r2
 8003464:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003468:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800346c:	6011      	str	r1, [r2, #0]
  return result;
 800346e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003472:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	fab2 f282 	clz	r2, r2
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f002 021f 	and.w	r2, r2, #31
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f202 	lsl.w	r2, r1, r2
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f43f af7f 	beq.w	8003394 <HAL_RCC_OscConfig+0xdd8>
 8003496:	e0dd      	b.n	8003654 <HAL_RCC_OscConfig+0x1098>
 8003498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034bc:	601a      	str	r2, [r3, #0]
  return result;
 80034be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	461a      	mov	r2, r3
 80034da:	2300      	movs	r3, #0
 80034dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fd fb95 	bl	8000c0c <HAL_GetTick>
 80034e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e6:	e009      	b.n	80034fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd fb90 	bl	8000c0c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0ac      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
 80034fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003500:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003520:	601a      	str	r2, [r3, #0]
  return result;
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800352a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d102      	bne.n	8003546 <HAL_RCC_OscConfig+0xf8a>
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_OscConfig+0x10a4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	e027      	b.n	8003596 <HAL_RCC_OscConfig+0xfda>
 8003546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800354e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003558:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fa93 f2a3 	rbit	r2, r3
 8003562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003566:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003570:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	fa93 f2a3 	rbit	r2, r3
 8003588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <HAL_RCC_OscConfig+0x10a4>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800359a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800359e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a2:	6011      	str	r1, [r2, #0]
 80035a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	fa92 f1a2 	rbit	r1, r2
 80035b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035b6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80035ba:	6011      	str	r1, [r2, #0]
  return result;
 80035bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035c0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	fab2 f282 	clz	r2, r2
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f042 0220 	orr.w	r2, r2, #32
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f002 021f 	and.w	r2, r2, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f202 	lsl.w	r2, r1, r2
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d182      	bne.n	80034e8 <HAL_RCC_OscConfig+0xf2c>
 80035e2:	e037      	b.n	8003654 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e02e      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_OscConfig+0x10a4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_RCC_OscConfig+0x10a4>)
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003608:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800360c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003614:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	429a      	cmp	r2, r3
 800361e:	d117      	bne.n	8003650 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003620:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003624:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003634:	429a      	cmp	r2, r3
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b09e      	sub	sp, #120	; 0x78
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e162      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b90      	ldr	r3, [pc, #576]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b8d      	ldr	r3, [pc, #564]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 0207 	bic.w	r2, r3, #7
 8003692:	498b      	ldr	r1, [pc, #556]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e14a      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	497f      	ldr	r1, [pc, #508]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80dc 	beq.w	8003890 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d13c      	bne.n	800375a <HAL_RCC_ClockConfig+0xf6>
 80036e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_RCC_ClockConfig+0xa6>
 8003704:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e00f      	b.n	800372a <HAL_RCC_ClockConfig+0xc6>
 800370a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800370e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	667b      	str	r3, [r7, #100]	; 0x64
 8003718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371c:	663b      	str	r3, [r7, #96]	; 0x60
 800371e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003726:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800372e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003732:	fa92 f2a2 	rbit	r2, r2
 8003736:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800373a:	fab2 f282 	clz	r2, r2
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f042 0220 	orr.w	r2, r2, #32
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f002 021f 	and.w	r2, r2, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d17b      	bne.n	800384e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0f3      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d13c      	bne.n	80037dc <HAL_RCC_ClockConfig+0x178>
 8003762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003766:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_RCC_ClockConfig+0x128>
 8003786:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	e00f      	b.n	80037ac <HAL_RCC_ClockConfig+0x148>
 800378c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
 800379a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a8:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80037b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f042 0220 	orr.w	r2, r2, #32
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	f002 021f 	and.w	r2, r2, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f202 	lsl.w	r2, r1, r2
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d13a      	bne.n	800384e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0b2      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
 80037dc:	2302      	movs	r3, #2
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_RCC_ClockConfig+0x1a0>
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	e00d      	b.n	8003820 <HAL_RCC_ClockConfig+0x1bc>
 8003804:	2302      	movs	r3, #2
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	2302      	movs	r3, #2
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2202      	movs	r2, #2
 8003822:	61ba      	str	r2, [r7, #24]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	fa92 f2a2 	rbit	r2, r2
 800382a:	617a      	str	r2, [r7, #20]
  return result;
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	fab2 f282 	clz	r2, r2
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	f042 0220 	orr.w	r2, r2, #32
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	f002 021f 	and.w	r2, r2, #31
 800383e:	2101      	movs	r1, #1
 8003840:	fa01 f202 	lsl.w	r2, r1, r2
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e079      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	491a      	ldr	r1, [pc, #104]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fd f9d4 	bl	8000c0c <HAL_GetTick>
 8003864:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fd f9d0 	bl	8000c0c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e061      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d214      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0207 	bic.w	r2, r3, #7
 80038a6:	4906      	ldr	r1, [pc, #24]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCC_ClockConfig+0x25c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e040      	b.n	8003942 <HAL_RCC_ClockConfig+0x2de>
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_RCC_ClockConfig+0x2e8>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	491a      	ldr	r1, [pc, #104]	; (800394c <HAL_RCC_ClockConfig+0x2e8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x2e8>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4912      	ldr	r1, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x2e8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003906:	f000 f829 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800390a:	4601      	mov	r1, r0
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_RCC_ClockConfig+0x2e8>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003914:	22f0      	movs	r2, #240	; 0xf0
 8003916:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	fa92 f2a2 	rbit	r2, r2
 800391e:	60fa      	str	r2, [r7, #12]
  return result;
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	fab2 f282 	clz	r2, r2
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	40d3      	lsrs	r3, r2
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x2ec>)
 800392c:	5cd3      	ldrb	r3, [r2, r3]
 800392e:	fa21 f303 	lsr.w	r3, r1, r3
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <HAL_RCC_ClockConfig+0x2f0>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <HAL_RCC_ClockConfig+0x2f4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd f922 	bl	8000b84 <HAL_InitTick>
  
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3778      	adds	r7, #120	; 0x78
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	08004880 	.word	0x08004880
 8003954:	20000004 	.word	0x20000004
 8003958:	20000008 	.word	0x20000008

0800395c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b08b      	sub	sp, #44	; 0x2c
 8003960:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x30>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x36>
 800398a:	e03f      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 800398e:	623b      	str	r3, [r7, #32]
      break;
 8003990:	e03f      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003998:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800399c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	fa92 f2a2 	rbit	r2, r2
 80039a4:	607a      	str	r2, [r7, #4]
  return result;
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	40d3      	lsrs	r3, r2
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	220f      	movs	r2, #15
 80039c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	fa92 f2a2 	rbit	r2, r2
 80039c8:	60fa      	str	r2, [r7, #12]
  return result;
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	fab2 f282 	clz	r2, r2
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	40d3      	lsrs	r3, r2
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e007      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	623b      	str	r3, [r7, #32]
      break;
 8003a0a:	e002      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a0e:	623b      	str	r3, [r7, #32]
      break;
 8003a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a12:	6a3b      	ldr	r3, [r7, #32]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	372c      	adds	r7, #44	; 0x2c
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40021000 	.word	0x40021000
 8003a24:	007a1200 	.word	0x007a1200
 8003a28:	08004898 	.word	0x08004898
 8003a2c:	080048a8 	.word	0x080048a8

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a4e:	f7ff ffef 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a52:	4601      	mov	r1, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	fa92 f2a2 	rbit	r2, r2
 8003a68:	603a      	str	r2, [r7, #0]
  return result;
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	fab2 f282 	clz	r2, r2
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	40d3      	lsrs	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	08004890 	.word	0x08004890

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a92:	f7ff ffcd 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a96:	4601      	mov	r1, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003aa0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003aa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	fa92 f2a2 	rbit	r2, r2
 8003aac:	603a      	str	r2, [r7, #0]
  return result;
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	fab2 f282 	clz	r2, r2
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	40d3      	lsrs	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08004890 	.word	0x08004890

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b092      	sub	sp, #72	; 0x48
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80d4 	beq.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10e      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
 8003b0c:	4b48      	ldr	r3, [pc, #288]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a41      	ldr	r2, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd f869 	bl	8000c0c <HAL_GetTick>
 8003b3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd f865 	bl	8000c0c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	; 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1d6      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8084 	beq.w	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d07c      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04b      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fd f815 	bl	8000c0c <HAL_GetTick>
 8003be2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd f811 	bl	8000c0c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e180      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	2302      	movs	r3, #2
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	61fb      	str	r3, [r7, #28]
  return result;
 8003c14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d108      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c2a:	4b01      	ldr	r3, [pc, #4]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	e00d      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40007000 	.word	0x40007000
 8003c38:	10908100 	.word	0x10908100
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	4b9a      	ldr	r3, [pc, #616]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	613a      	str	r2, [r7, #16]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	60fa      	str	r2, [r7, #12]
  return result;
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0b7      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c76:	4b8f      	ldr	r3, [pc, #572]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	498c      	ldr	r1, [pc, #560]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4a87      	ldr	r2, [pc, #540]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca8:	4b82      	ldr	r3, [pc, #520]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f023 0203 	bic.w	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	497f      	ldr	r1, [pc, #508]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cc6:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4978      	ldr	r1, [pc, #480]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ce4:	4b73      	ldr	r3, [pc, #460]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	4970      	ldr	r1, [pc, #448]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d02:	4b6c      	ldr	r3, [pc, #432]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f023 0210 	bic.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4969      	ldr	r1, [pc, #420]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	4961      	ldr	r1, [pc, #388]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f023 0220 	bic.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	495a      	ldr	r1, [pc, #360]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5c:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	4952      	ldr	r1, [pc, #328]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	494b      	ldr	r1, [pc, #300]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d98:	4b46      	ldr	r3, [pc, #280]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4943      	ldr	r1, [pc, #268]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db6:	4b3f      	ldr	r3, [pc, #252]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	493c      	ldr	r1, [pc, #240]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd4:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	4934      	ldr	r1, [pc, #208]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	492d      	ldr	r1, [pc, #180]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e10:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1c:	4925      	ldr	r1, [pc, #148]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	491e      	ldr	r1, [pc, #120]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	4916      	ldr	r1, [pc, #88]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	490f      	ldr	r1, [pc, #60]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	4907      	ldr	r1, [pc, #28]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ea6:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	4913      	ldr	r1, [pc, #76]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	4904      	ldr	r1, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3748      	adds	r7, #72	; 0x48
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e040      	b.n	8003fa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc fd60 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8c0 	bl	80040d0 <UART_SetConfig>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e022      	b.n	8003fa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa8a 	bl	800447c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fb11 	bl	80045c0 <UART_CheckIdleState>
 8003f9e:	4603      	mov	r3, r0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	f040 8082 	bne.w	80040c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_Transmit+0x26>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07a      	b.n	80040c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x38>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e073      	b.n	80040c8 <HAL_UART_Transmit+0x120>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2221      	movs	r2, #33	; 0x21
 8003ff4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff6:	f7fc fe09 	bl	8000c0c <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d108      	bne.n	8004028 <HAL_UART_Transmit+0x80>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	e003      	b.n	8004030 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004038:	e02d      	b.n	8004096 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fb04 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e039      	b.n	80040c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004066:	b292      	uxth	r2, r2
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	3302      	adds	r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e008      	b.n	8004084 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b292      	uxth	r2, r2
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cb      	bne.n	800403a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fad0 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e005      	b.n	80040c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b92      	ldr	r3, [pc, #584]	; (8004344 <UART_SetConfig+0x274>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6979      	ldr	r1, [r7, #20]
 8004104:	430b      	orrs	r3, r1
 8004106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a80      	ldr	r2, [pc, #512]	; (8004348 <UART_SetConfig+0x278>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d120      	bne.n	800418e <UART_SetConfig+0xbe>
 800414c:	4b7f      	ldr	r3, [pc, #508]	; (800434c <UART_SetConfig+0x27c>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d817      	bhi.n	8004188 <UART_SetConfig+0xb8>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x90>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004171 	.word	0x08004171
 8004164:	0800417d 	.word	0x0800417d
 8004168:	08004183 	.word	0x08004183
 800416c:	08004177 	.word	0x08004177
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e0b5      	b.n	80042e2 <UART_SetConfig+0x212>
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e0b2      	b.n	80042e2 <UART_SetConfig+0x212>
 800417c:	2304      	movs	r3, #4
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0af      	b.n	80042e2 <UART_SetConfig+0x212>
 8004182:	2308      	movs	r3, #8
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0ac      	b.n	80042e2 <UART_SetConfig+0x212>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0a9      	b.n	80042e2 <UART_SetConfig+0x212>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6f      	ldr	r2, [pc, #444]	; (8004350 <UART_SetConfig+0x280>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d124      	bne.n	80041e2 <UART_SetConfig+0x112>
 8004198:	4b6c      	ldr	r3, [pc, #432]	; (800434c <UART_SetConfig+0x27c>)
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041a4:	d011      	beq.n	80041ca <UART_SetConfig+0xfa>
 80041a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041aa:	d817      	bhi.n	80041dc <UART_SetConfig+0x10c>
 80041ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b0:	d011      	beq.n	80041d6 <UART_SetConfig+0x106>
 80041b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b6:	d811      	bhi.n	80041dc <UART_SetConfig+0x10c>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <UART_SetConfig+0xf4>
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d006      	beq.n	80041d0 <UART_SetConfig+0x100>
 80041c2:	e00b      	b.n	80041dc <UART_SetConfig+0x10c>
 80041c4:	2300      	movs	r3, #0
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e08b      	b.n	80042e2 <UART_SetConfig+0x212>
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e088      	b.n	80042e2 <UART_SetConfig+0x212>
 80041d0:	2304      	movs	r3, #4
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e085      	b.n	80042e2 <UART_SetConfig+0x212>
 80041d6:	2308      	movs	r3, #8
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e082      	b.n	80042e2 <UART_SetConfig+0x212>
 80041dc:	2310      	movs	r3, #16
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e07f      	b.n	80042e2 <UART_SetConfig+0x212>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5b      	ldr	r2, [pc, #364]	; (8004354 <UART_SetConfig+0x284>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d124      	bne.n	8004236 <UART_SetConfig+0x166>
 80041ec:	4b57      	ldr	r3, [pc, #348]	; (800434c <UART_SetConfig+0x27c>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80041f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041f8:	d011      	beq.n	800421e <UART_SetConfig+0x14e>
 80041fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0x160>
 8004200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004204:	d011      	beq.n	800422a <UART_SetConfig+0x15a>
 8004206:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800420a:	d811      	bhi.n	8004230 <UART_SetConfig+0x160>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0x148>
 8004210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004214:	d006      	beq.n	8004224 <UART_SetConfig+0x154>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x160>
 8004218:	2300      	movs	r3, #0
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e061      	b.n	80042e2 <UART_SetConfig+0x212>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e05e      	b.n	80042e2 <UART_SetConfig+0x212>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e05b      	b.n	80042e2 <UART_SetConfig+0x212>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e058      	b.n	80042e2 <UART_SetConfig+0x212>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e055      	b.n	80042e2 <UART_SetConfig+0x212>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a47      	ldr	r2, [pc, #284]	; (8004358 <UART_SetConfig+0x288>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d124      	bne.n	800428a <UART_SetConfig+0x1ba>
 8004240:	4b42      	ldr	r3, [pc, #264]	; (800434c <UART_SetConfig+0x27c>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004248:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424c:	d011      	beq.n	8004272 <UART_SetConfig+0x1a2>
 800424e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004252:	d817      	bhi.n	8004284 <UART_SetConfig+0x1b4>
 8004254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004258:	d011      	beq.n	800427e <UART_SetConfig+0x1ae>
 800425a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425e:	d811      	bhi.n	8004284 <UART_SetConfig+0x1b4>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <UART_SetConfig+0x19c>
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d006      	beq.n	8004278 <UART_SetConfig+0x1a8>
 800426a:	e00b      	b.n	8004284 <UART_SetConfig+0x1b4>
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e037      	b.n	80042e2 <UART_SetConfig+0x212>
 8004272:	2302      	movs	r3, #2
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e034      	b.n	80042e2 <UART_SetConfig+0x212>
 8004278:	2304      	movs	r3, #4
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e031      	b.n	80042e2 <UART_SetConfig+0x212>
 800427e:	2308      	movs	r3, #8
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e02e      	b.n	80042e2 <UART_SetConfig+0x212>
 8004284:	2310      	movs	r3, #16
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e02b      	b.n	80042e2 <UART_SetConfig+0x212>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a33      	ldr	r2, [pc, #204]	; (800435c <UART_SetConfig+0x28c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d124      	bne.n	80042de <UART_SetConfig+0x20e>
 8004294:	4b2d      	ldr	r3, [pc, #180]	; (800434c <UART_SetConfig+0x27c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800429c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a0:	d011      	beq.n	80042c6 <UART_SetConfig+0x1f6>
 80042a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a6:	d817      	bhi.n	80042d8 <UART_SetConfig+0x208>
 80042a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ac:	d011      	beq.n	80042d2 <UART_SetConfig+0x202>
 80042ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b2:	d811      	bhi.n	80042d8 <UART_SetConfig+0x208>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <UART_SetConfig+0x1f0>
 80042b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042bc:	d006      	beq.n	80042cc <UART_SetConfig+0x1fc>
 80042be:	e00b      	b.n	80042d8 <UART_SetConfig+0x208>
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e00d      	b.n	80042e2 <UART_SetConfig+0x212>
 80042c6:	2302      	movs	r3, #2
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e00a      	b.n	80042e2 <UART_SetConfig+0x212>
 80042cc:	2304      	movs	r3, #4
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e007      	b.n	80042e2 <UART_SetConfig+0x212>
 80042d2:	2308      	movs	r3, #8
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e004      	b.n	80042e2 <UART_SetConfig+0x212>
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e001      	b.n	80042e2 <UART_SetConfig+0x212>
 80042de:	2310      	movs	r3, #16
 80042e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	d16c      	bne.n	80043c6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d838      	bhi.n	8004364 <UART_SetConfig+0x294>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x228>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004325 	.word	0x08004325
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004365 	.word	0x08004365
 8004308:	08004333 	.word	0x08004333
 800430c:	08004365 	.word	0x08004365
 8004310:	08004365 	.word	0x08004365
 8004314:	08004365 	.word	0x08004365
 8004318:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7ff fb94 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004320:	61b8      	str	r0, [r7, #24]
        break;
 8004322:	e024      	b.n	800436e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7ff fbb2 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8004328:	61b8      	str	r0, [r7, #24]
        break;
 800432a:	e020      	b.n	800436e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <UART_SetConfig+0x290>)
 800432e:	61bb      	str	r3, [r7, #24]
        break;
 8004330:	e01d      	b.n	800436e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7ff fb13 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8004336:	61b8      	str	r0, [r7, #24]
        break;
 8004338:	e019      	b.n	800436e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e015      	b.n	800436e <UART_SetConfig+0x29e>
 8004342:	bf00      	nop
 8004344:	efff69f3 	.word	0xefff69f3
 8004348:	40013800 	.word	0x40013800
 800434c:	40021000 	.word	0x40021000
 8004350:	40004400 	.word	0x40004400
 8004354:	40004800 	.word	0x40004800
 8004358:	40004c00 	.word	0x40004c00
 800435c:	40005000 	.word	0x40005000
 8004360:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77bb      	strb	r3, [r7, #30]
        break;
 800436c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d075      	beq.n	8004460 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	005a      	lsls	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d916      	bls.n	80043c0 <UART_SetConfig+0x2f0>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d212      	bcs.n	80043c0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	89fb      	ldrh	r3, [r7, #14]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	89fa      	ldrh	r2, [r7, #14]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	e04f      	b.n	8004460 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	77bb      	strb	r3, [r7, #30]
 80043c4:	e04c      	b.n	8004460 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d828      	bhi.n	800441e <UART_SetConfig+0x34e>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0x304>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004401 	.word	0x08004401
 80043dc:	08004409 	.word	0x08004409
 80043e0:	0800441f 	.word	0x0800441f
 80043e4:	0800440f 	.word	0x0800440f
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	0800441f 	.word	0x0800441f
 80043f0:	0800441f 	.word	0x0800441f
 80043f4:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7ff fb26 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61b8      	str	r0, [r7, #24]
        break;
 80043fe:	e013      	b.n	8004428 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004400:	f7ff fb44 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8004404:	61b8      	str	r0, [r7, #24]
        break;
 8004406:	e00f      	b.n	8004428 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <UART_SetConfig+0x3a8>)
 800440a:	61bb      	str	r3, [r7, #24]
        break;
 800440c:	e00c      	b.n	8004428 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7ff faa5 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8004412:	61b8      	str	r0, [r7, #24]
        break;
 8004414:	e008      	b.n	8004428 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441a:	61bb      	str	r3, [r7, #24]
        break;
 800441c:	e004      	b.n	8004428 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	77bb      	strb	r3, [r7, #30]
        break;
 8004426:	bf00      	nop
    }

    if (pclk != 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d018      	beq.n	8004460 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	085a      	lsrs	r2, r3, #1
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	b29b      	uxth	r3, r3
 8004442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	d908      	bls.n	800445c <UART_SetConfig+0x38c>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d204      	bcs.n	800445c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e001      	b.n	8004460 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800446c:	7fbb      	ldrb	r3, [r7, #30]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	007a1200 	.word	0x007a1200

0800447c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	d10a      	bne.n	8004592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d0:	f7fc fb1c 	bl	8000c0c <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d10e      	bne.n	8004602 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f82d 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e023      	b.n	800464a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d10e      	bne.n	800462e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f817 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e00d      	b.n	800464a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b09c      	sub	sp, #112	; 0x70
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	e0a5      	b.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	f000 80a1 	beq.w	80047b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fc facd 	bl	8000c0c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <UART_WaitOnFlagUntilTimeout+0x32>
 800467e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004680:	2b00      	cmp	r3, #0
 8004682:	d13e      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004698:	667b      	str	r3, [r7, #100]	; 0x64
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e6      	bne.n	8004684 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3308      	adds	r3, #8
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	663b      	str	r3, [r7, #96]	; 0x60
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3308      	adds	r3, #8
 80046d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e067      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d04f      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471e:	d147      	bne.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004728:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800473e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004748:	637b      	str	r3, [r7, #52]	; 0x34
 800474a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e6      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	613b      	str	r3, [r7, #16]
   return(result);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	66bb      	str	r3, [r7, #104]	; 0x68
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3308      	adds	r3, #8
 800477a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800477c:	623a      	str	r2, [r7, #32]
 800477e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	61bb      	str	r3, [r7, #24]
   return(result);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e5      	bne.n	800475c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e010      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	429a      	cmp	r2, r3
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	f43f af4a 	beq.w	8004664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3770      	adds	r7, #112	; 0x70
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <__libc_init_array>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4d0d      	ldr	r5, [pc, #52]	; (8004814 <__libc_init_array+0x38>)
 80047e0:	4c0d      	ldr	r4, [pc, #52]	; (8004818 <__libc_init_array+0x3c>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	2600      	movs	r6, #0
 80047e8:	42a6      	cmp	r6, r4
 80047ea:	d109      	bne.n	8004800 <__libc_init_array+0x24>
 80047ec:	4d0b      	ldr	r5, [pc, #44]	; (800481c <__libc_init_array+0x40>)
 80047ee:	4c0c      	ldr	r4, [pc, #48]	; (8004820 <__libc_init_array+0x44>)
 80047f0:	f000 f820 	bl	8004834 <_init>
 80047f4:	1b64      	subs	r4, r4, r5
 80047f6:	10a4      	asrs	r4, r4, #2
 80047f8:	2600      	movs	r6, #0
 80047fa:	42a6      	cmp	r6, r4
 80047fc:	d105      	bne.n	800480a <__libc_init_array+0x2e>
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	f855 3b04 	ldr.w	r3, [r5], #4
 8004804:	4798      	blx	r3
 8004806:	3601      	adds	r6, #1
 8004808:	e7ee      	b.n	80047e8 <__libc_init_array+0xc>
 800480a:	f855 3b04 	ldr.w	r3, [r5], #4
 800480e:	4798      	blx	r3
 8004810:	3601      	adds	r6, #1
 8004812:	e7f2      	b.n	80047fa <__libc_init_array+0x1e>
 8004814:	080048b8 	.word	0x080048b8
 8004818:	080048b8 	.word	0x080048b8
 800481c:	080048b8 	.word	0x080048b8
 8004820:	080048bc 	.word	0x080048bc

08004824 <memset>:
 8004824:	4402      	add	r2, r0
 8004826:	4603      	mov	r3, r0
 8004828:	4293      	cmp	r3, r2
 800482a:	d100      	bne.n	800482e <memset+0xa>
 800482c:	4770      	bx	lr
 800482e:	f803 1b01 	strb.w	r1, [r3], #1
 8004832:	e7f9      	b.n	8004828 <memset+0x4>

08004834 <_init>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr

08004840 <_fini>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr
