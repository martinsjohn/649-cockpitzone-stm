
uart-proxy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004980  08004980  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004980  08004980  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000168  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4e8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7f  00000000  00000000  0002e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  000301a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff52  00000000  00000000  00031650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e38a  00000000  00000000  000515a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c287c  00000000  00000000  0005f92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001221a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c3c  00000000  00000000  001221f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080048fc 	.word	0x080048fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080048fc 	.word	0x080048fc

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b08c      	sub	sp, #48	; 0x30
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fd21 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f96f 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fabb 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 fa89 	bl	80006fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001ea:	f000 fa47 	bl	800067c <MX_I2C1_Init>
  MX_CAN_Init();
 80001ee:	f000 f9c7 	bl	8000580 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  volatile uint8_t buf[4];
  uint8_t send_ok[] = "CAN SEND OK\r\n";
 80001f2:	4ba4      	ldr	r3, [pc, #656]	; (8000484 <main+0x2b0>)
 80001f4:	f107 0418 	add.w	r4, r7, #24
 80001f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001fa:	c407      	stmia	r4!, {r0, r1, r2}
 80001fc:	8023      	strh	r3, [r4, #0]
  uint8_t send_bad[] = "CAN SEND ERROR\r\n";
 80001fe:	4ba2      	ldr	r3, [pc, #648]	; (8000488 <main+0x2b4>)
 8000200:	1d3c      	adds	r4, r7, #4
 8000202:	461d      	mov	r5, r3
 8000204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000208:	682b      	ldr	r3, [r5, #0]
 800020a:	7023      	strb	r3, [r4, #0]
		//strcpy(buf, "ERROR!");
	//}


	//HAL_StatusTypeDef rcvSt =
	HAL_I2C_Slave_Receive(&hi2c1, &buf[0], 1, HAL_MAX_DELAY);
 800020c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000210:	f04f 33ff 	mov.w	r3, #4294967295
 8000214:	2201      	movs	r2, #1
 8000216:	489d      	ldr	r0, [pc, #628]	; (800048c <main+0x2b8>)
 8000218:	f001 ff1b 	bl	8002052 <HAL_I2C_Slave_Receive>
  	//strcpy(buf, "hello\n");
  	//HAL_UART_Transmit(&huart2, buf, 4, 200);
  	//HAL_UART_Transmit(&huart2, "\r\n", 3, 200);
	//HAL_UART_Transmit(&huart2, "first: ", sizeof("first: "), 200);
  	//HAL_UART_Transmit(&huart2, &buf[0], 1, 200);
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[1], 1, HAL_MAX_DELAY);
 800021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000220:	1c59      	adds	r1, r3, #1
 8000222:	f04f 33ff 	mov.w	r3, #4294967295
 8000226:	2201      	movs	r2, #1
 8000228:	4898      	ldr	r0, [pc, #608]	; (800048c <main+0x2b8>)
 800022a:	f001 ff12 	bl	8002052 <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", second: ", sizeof(", second:"), 200);
  	//HAL_UART_Transmit(&huart2, &buf[1], 1, 200);
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[2], 1, HAL_MAX_DELAY);
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	1c99      	adds	r1, r3, #2
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
 8000238:	2201      	movs	r2, #1
 800023a:	4894      	ldr	r0, [pc, #592]	; (800048c <main+0x2b8>)
 800023c:	f001 ff09 	bl	8002052 <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", thrid: ", sizeof(", thrid: "), 200);
  	//HAL_UART_Transmit(&huart2, &buf[2], 1, 200);
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[3], 1, HAL_MAX_DELAY);
 8000240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000244:	1cd9      	adds	r1, r3, #3
 8000246:	f04f 33ff 	mov.w	r3, #4294967295
 800024a:	2201      	movs	r2, #1
 800024c:	488f      	ldr	r0, [pc, #572]	; (800048c <main+0x2b8>)
 800024e:	f001 ff00 	bl	8002052 <HAL_I2C_Slave_Receive>
// 3 - both blink




if (current_blink == 0 && buf[3] > 0 && (globalFail == 0)) { // blink button pressed down
 8000252:	4b8f      	ldr	r3, [pc, #572]	; (8000490 <main+0x2bc>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d152      	bne.n	8000300 <main+0x12c>
 800025a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d04d      	beq.n	8000300 <main+0x12c>
 8000264:	4b8b      	ldr	r3, [pc, #556]	; (8000494 <main+0x2c0>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d149      	bne.n	8000300 <main+0x12c>
    if (blinking == 1 && buf[3] == 2) {
 800026c:	4b8a      	ldr	r3, [pc, #552]	; (8000498 <main+0x2c4>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d10b      	bne.n	800028c <main+0xb8>
 8000274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b02      	cmp	r3, #2
 800027c:	d106      	bne.n	800028c <main+0xb8>
        blinking = 2;
 800027e:	4b86      	ldr	r3, [pc, #536]	; (8000498 <main+0x2c4>)
 8000280:	2202      	movs	r2, #2
 8000282:	701a      	strb	r2, [r3, #0]
        blinkSend = 2;
 8000284:	4b85      	ldr	r3, [pc, #532]	; (800049c <main+0x2c8>)
 8000286:	2202      	movs	r2, #2
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e033      	b.n	80002f4 <main+0x120>
    }
    else if (blinking == 1 && buf[3] == 1){
 800028c:	4b82      	ldr	r3, [pc, #520]	; (8000498 <main+0x2c4>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d108      	bne.n	80002a6 <main+0xd2>
 8000294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2b01      	cmp	r3, #1
 800029c:	d103      	bne.n	80002a6 <main+0xd2>
    	blinking = 0;
 800029e:	4b7e      	ldr	r3, [pc, #504]	; (8000498 <main+0x2c4>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	e026      	b.n	80002f4 <main+0x120>
    }
    else if (blinking == 2 && buf[3] == 1){
 80002a6:	4b7c      	ldr	r3, [pc, #496]	; (8000498 <main+0x2c4>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d10b      	bne.n	80002c6 <main+0xf2>
 80002ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d106      	bne.n	80002c6 <main+0xf2>
    	blinking = 1;
 80002b8:	4b77      	ldr	r3, [pc, #476]	; (8000498 <main+0x2c4>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
    	blinkSend = 1;
 80002be:	4b77      	ldr	r3, [pc, #476]	; (800049c <main+0x2c8>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	e016      	b.n	80002f4 <main+0x120>
    }
    else if (blinking == 2 && buf[3] == 2){
 80002c6:	4b74      	ldr	r3, [pc, #464]	; (8000498 <main+0x2c4>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d108      	bne.n	80002e0 <main+0x10c>
 80002ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d103      	bne.n	80002e0 <main+0x10c>
    	blinking = 0;
 80002d8:	4b6f      	ldr	r3, [pc, #444]	; (8000498 <main+0x2c4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	e009      	b.n	80002f4 <main+0x120>
    }
    else {
        blinking = buf[3];
 80002e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b6c      	ldr	r3, [pc, #432]	; (8000498 <main+0x2c4>)
 80002e8:	701a      	strb	r2, [r3, #0]
        blinkSend = buf[3];
 80002ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b6a      	ldr	r3, [pc, #424]	; (800049c <main+0x2c8>)
 80002f2:	701a      	strb	r2, [r3, #0]
    }
    current_blink = buf[3];
 80002f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b65      	ldr	r3, [pc, #404]	; (8000490 <main+0x2bc>)
 80002fc:	701a      	strb	r2, [r3, #0]
 80002fe:	e00f      	b.n	8000320 <main+0x14c>
} else if (current_blink > 0 && buf[3] == 0 && (globalFail == 0)) { // blink button released
 8000300:	4b63      	ldr	r3, [pc, #396]	; (8000490 <main+0x2bc>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d00b      	beq.n	8000320 <main+0x14c>
 8000308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d106      	bne.n	8000320 <main+0x14c>
 8000312:	4b60      	ldr	r3, [pc, #384]	; (8000494 <main+0x2c0>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d102      	bne.n	8000320 <main+0x14c>
    current_blink = 0;
 800031a:	4b5d      	ldr	r3, [pc, #372]	; (8000490 <main+0x2bc>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
}




if (blinking == 1 && currWheel >= LEFT_THOLD && buf[0] < LEFT_THOLD) {
 8000320:	4b5d      	ldr	r3, [pc, #372]	; (8000498 <main+0x2c4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d10e      	bne.n	8000346 <main+0x172>
 8000328:	4b5d      	ldr	r3, [pc, #372]	; (80004a0 <main+0x2cc>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b56      	cmp	r3, #86	; 0x56
 800032e:	d90a      	bls.n	8000346 <main+0x172>
 8000330:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b56      	cmp	r3, #86	; 0x56
 8000338:	d805      	bhi.n	8000346 <main+0x172>
    blinking = 0;
 800033a:	4b57      	ldr	r3, [pc, #348]	; (8000498 <main+0x2c4>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
    blinkSend = 0;
 8000340:	4b56      	ldr	r3, [pc, #344]	; (800049c <main+0x2c8>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
}

if (blinking == 2 && currWheel <= RIGHT_THOLD && buf[0] > RIGHT_THOLD) {
 8000346:	4b54      	ldr	r3, [pc, #336]	; (8000498 <main+0x2c4>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d10e      	bne.n	800036c <main+0x198>
 800034e:	4b54      	ldr	r3, [pc, #336]	; (80004a0 <main+0x2cc>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b43      	cmp	r3, #67	; 0x43
 8000354:	d80a      	bhi.n	800036c <main+0x198>
 8000356:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b43      	cmp	r3, #67	; 0x43
 800035e:	d905      	bls.n	800036c <main+0x198>
    blinking = 0;
 8000360:	4b4d      	ldr	r3, [pc, #308]	; (8000498 <main+0x2c4>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
    blinkSend = 0;
 8000366:	4b4d      	ldr	r3, [pc, #308]	; (800049c <main+0x2c8>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
}

currWheel = buf[0];
 800036c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b4b      	ldr	r3, [pc, #300]	; (80004a0 <main+0x2cc>)
 8000374:	701a      	strb	r2, [r3, #0]
  		currBlink = 0;
  	}
  	*/

	//pulses light
	if(blinking > 0 || (globalFail != 0)){
 8000376:	4b48      	ldr	r3, [pc, #288]	; (8000498 <main+0x2c4>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d103      	bne.n	8000386 <main+0x1b2>
 800037e:	4b45      	ldr	r3, [pc, #276]	; (8000494 <main+0x2c0>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d023      	beq.n	80003ce <main+0x1fa>
		currBlinkCount ++;
 8000386:	4b47      	ldr	r3, [pc, #284]	; (80004a4 <main+0x2d0>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b45      	ldr	r3, [pc, #276]	; (80004a4 <main+0x2d0>)
 8000390:	701a      	strb	r2, [r3, #0]
		if(currBlinkCount >= maxBlinkCount){
 8000392:	4b44      	ldr	r3, [pc, #272]	; (80004a4 <main+0x2d0>)
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	4b44      	ldr	r3, [pc, #272]	; (80004a8 <main+0x2d4>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d31d      	bcc.n	80003da <main+0x206>
			currBlinkCount = 0;
 800039e:	4b41      	ldr	r3, [pc, #260]	; (80004a4 <main+0x2d0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
			if(blinkSend == 0){
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <main+0x2c8>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d10c      	bne.n	80003c6 <main+0x1f2>
				if(globalFail == 0){
 80003ac:	4b39      	ldr	r3, [pc, #228]	; (8000494 <main+0x2c0>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d104      	bne.n	80003be <main+0x1ea>
					blinkSend = blinking;
 80003b4:	4b38      	ldr	r3, [pc, #224]	; (8000498 <main+0x2c4>)
 80003b6:	781a      	ldrb	r2, [r3, #0]
 80003b8:	4b38      	ldr	r3, [pc, #224]	; (800049c <main+0x2c8>)
 80003ba:	701a      	strb	r2, [r3, #0]
		if(currBlinkCount >= maxBlinkCount){
 80003bc:	e00d      	b.n	80003da <main+0x206>
				}
				else{
					blinkSend = 3;
 80003be:	4b37      	ldr	r3, [pc, #220]	; (800049c <main+0x2c8>)
 80003c0:	2203      	movs	r2, #3
 80003c2:	701a      	strb	r2, [r3, #0]
		if(currBlinkCount >= maxBlinkCount){
 80003c4:	e009      	b.n	80003da <main+0x206>
				}

			}
			else{
				blinkSend = 0;
 80003c6:	4b35      	ldr	r3, [pc, #212]	; (800049c <main+0x2c8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
		if(currBlinkCount >= maxBlinkCount){
 80003cc:	e005      	b.n	80003da <main+0x206>
			}
		}
	}
	else{
		currBlinkCount = 0;
 80003ce:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <main+0x2d0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
		blinkSend = 0;
 80003d4:	4b31      	ldr	r3, [pc, #196]	; (800049c <main+0x2c8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
	}


	//No Failure --> Send Normal
	if(globalFail == 0){
 80003da:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <main+0x2c0>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d113      	bne.n	800040a <main+0x236>
		TxData[0] = buf[0]; //Wheel Angle (50 -100)
 80003e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	4b30      	ldr	r3, [pc, #192]	; (80004ac <main+0x2d8>)
 80003ea:	701a      	strb	r2, [r3, #0]
		TxData[1] = buf[1]; // Throttle Angle (0-100)
 80003ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <main+0x2d8>)
 80003f4:	705a      	strb	r2, [r3, #1]
		TxData[2] = buf[2]; // Brake (0-100)
 80003f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <main+0x2d8>)
 80003fe:	709a      	strb	r2, [r3, #2]
		TxData[3] = blinkSend; // Blinkers (0, 1, 2)
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <main+0x2c8>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b29      	ldr	r3, [pc, #164]	; (80004ac <main+0x2d8>)
 8000406:	70da      	strb	r2, [r3, #3]
 8000408:	e00e      	b.n	8000428 <main+0x254>
	}
	//Failure --> Send Error State
	else{
		TxData[0] = buf[0]; //Wheel Angle (50 - 100) --> still works in failure
 800040a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b26      	ldr	r3, [pc, #152]	; (80004ac <main+0x2d8>)
 8000412:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0; // No Throttle (0)
 8000414:	4b25      	ldr	r3, [pc, #148]	; (80004ac <main+0x2d8>)
 8000416:	2200      	movs	r2, #0
 8000418:	705a      	strb	r2, [r3, #1]
		TxData[2] = 100; // Locked Brakes (100)
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <main+0x2d8>)
 800041c:	2264      	movs	r2, #100	; 0x64
 800041e:	709a      	strb	r2, [r3, #2]
		TxData[3] = blinkSend; // Hazard State (3))
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <main+0x2c8>)
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <main+0x2d8>)
 8000426:	70da      	strb	r2, [r3, #3]

	}


  	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000428:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <main+0x2dc>)
 800042a:	4a20      	ldr	r2, [pc, #128]	; (80004ac <main+0x2d8>)
 800042c:	4921      	ldr	r1, [pc, #132]	; (80004b4 <main+0x2e0>)
 800042e:	4822      	ldr	r0, [pc, #136]	; (80004b8 <main+0x2e4>)
 8000430:	f000 fe89 	bl	8001146 <HAL_CAN_AddTxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d00a      	beq.n	8000450 <main+0x27c>
  	{

  	  //Transmission request Error

  		HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,send_bad,sizeof(send_bad),100);// Sending in normal mode
 800043a:	1d39      	adds	r1, r7, #4
 800043c:	2364      	movs	r3, #100	; 0x64
 800043e:	2211      	movs	r2, #17
 8000440:	481e      	ldr	r0, [pc, #120]	; (80004bc <main+0x2e8>)
 8000442:	f003 fe15 	bl	8004070 <HAL_UART_Transmit>
 8000446:	4603      	mov	r3, r0
 8000448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		if (status == HAL_OK) {
  		}
  	  Error_Handler();
 800044c:	f000 fa5e 	bl	800090c <Error_Handler>
  	}
  	HAL_Delay(10);
 8000450:	200a      	movs	r0, #10
 8000452:	f000 fc4b 	bl	8000cec <HAL_Delay>
  	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,send_ok,sizeof(send_ok),100);// Sending in normal mode
 8000456:	f107 0118 	add.w	r1, r7, #24
 800045a:	2364      	movs	r3, #100	; 0x64
 800045c:	220e      	movs	r2, #14
 800045e:	4817      	ldr	r0, [pc, #92]	; (80004bc <main+0x2e8>)
 8000460:	f003 fe06 	bl	8004070 <HAL_UART_Transmit>
 8000464:	4603      	mov	r3, r0
 8000466:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  	if (status == HAL_OK) {
 800046a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800046e:	2b00      	cmp	r3, #0
 8000470:	f47f aecc 	bne.w	800020c <main+0x38>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2120      	movs	r1, #32
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f001 fd42 	bl	8001f04 <HAL_GPIO_WritePin>
  {
 8000480:	e6c4      	b.n	800020c <main+0x38>
 8000482:	bf00      	nop
 8000484:	08004914 	.word	0x08004914
 8000488:	08004924 	.word	0x08004924
 800048c:	20000054 	.word	0x20000054
 8000490:	2000016c 	.word	0x2000016c
 8000494:	20000170 	.word	0x20000170
 8000498:	2000016d 	.word	0x2000016d
 800049c:	2000016f 	.word	0x2000016f
 80004a0:	20000000 	.word	0x20000000
 80004a4:	2000016e 	.word	0x2000016e
 80004a8:	20000001 	.word	0x20000001
 80004ac:	20000158 	.word	0x20000158
 80004b0:	20000168 	.word	0x20000168
 80004b4:	20000124 	.word	0x20000124
 80004b8:	2000002c 	.word	0x2000002c
 80004bc:	200000a0 	.word	0x200000a0

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b0a6      	sub	sp, #152	; 0x98
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ca:	2228      	movs	r2, #40	; 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 fa0c 	bl	80048ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2258      	movs	r2, #88	; 0x58
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f004 f9fe 	bl	80048ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f0:	2302      	movs	r3, #2
 80004f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f4:	2301      	movs	r3, #1
 80004f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f8:	2310      	movs	r3, #16
 80004fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fe:	2302      	movs	r3, #2
 8000500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800050c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f8b0 	bl	8002684 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800052a:	f000 f9ef 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
 8000530:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000532:	2302      	movs	r3, #2
 8000534:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000544:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f8ee 	bl	800372c <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000556:	f000 f9d9 	bl	800090c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800055a:	2322      	movs	r3, #34	; 0x22
 800055c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fb15 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000574:	f000 f9ca 	bl	800090c <Error_Handler>
  }
}
 8000578:	bf00      	nop
 800057a:	3798      	adds	r7, #152	; 0x98
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MX_CAN_Init+0xf0>)
 8000588:	4a3a      	ldr	r2, [pc, #232]	; (8000674 <MX_CAN_Init+0xf4>)
 800058a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800058c:	4b38      	ldr	r3, [pc, #224]	; (8000670 <MX_CAN_Init+0xf0>)
 800058e:	2210      	movs	r2, #16
 8000590:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <MX_CAN_Init+0xf0>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000598:	4b35      	ldr	r3, [pc, #212]	; (8000670 <MX_CAN_Init+0xf0>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <MX_CAN_Init+0xf0>)
 80005a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005a4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80005a6:	4b32      	ldr	r3, [pc, #200]	; (8000670 <MX_CAN_Init+0xf0>)
 80005a8:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80005ac:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <MX_CAN_Init+0xf0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005b4:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <MX_CAN_Init+0xf0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <MX_CAN_Init+0xf0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <MX_CAN_Init+0xf0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_CAN_Init+0xf0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <MX_CAN_Init+0xf0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005d2:	4827      	ldr	r0, [pc, #156]	; (8000670 <MX_CAN_Init+0xf0>)
 80005d4:	f000 fbae 	bl	8000d34 <HAL_CAN_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80005de:	f000 f995 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	sFilterConfig.FilterIdHigh = 0x0000;
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005fe:	2301      	movs	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000602:	2301      	movs	r3, #1
 8000604:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000606:	230e      	movs	r3, #14
 8000608:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <MX_CAN_Init+0xf0>)
 8000610:	f000 fc8b 	bl	8000f2a <HAL_CAN_ConfigFilter>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_CAN_Init+0x9e>
	  {
		/* Filter configuration Error */
		Error_Handler();
 800061a:	f000 f977 	bl	800090c <Error_Handler>
	  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <MX_CAN_Init+0xf0>)
 8000620:	f000 fd4d 	bl	80010be <HAL_CAN_Start>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_CAN_Init+0xae>
  {
	/* Start Error */
	Error_Handler();
 800062a:	f000 f96f 	bl	800090c <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800062e:	2102      	movs	r1, #2
 8000630:	480f      	ldr	r0, [pc, #60]	; (8000670 <MX_CAN_Init+0xf0>)
 8000632:	f000 ff75 	bl	8001520 <HAL_CAN_ActivateNotification>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_CAN_Init+0xc0>
  {
	/* Notification Error */
	Error_Handler();
 800063c:	f000 f966 	bl	800090c <Error_Handler>
  }

  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = 0x320;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CAN_Init+0xf8>)
 8000642:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000646:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_CAN_Init+0xf8>)
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CAN_Init+0xf8>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_CAN_Init+0xf8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CAN_Init+0xf8>)
 800065c:	2208      	movs	r2, #8
 800065e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <MX_CAN_Init+0xf8>)
 8000662:	2200      	movs	r2, #0
 8000664:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40006400 	.word	0x40006400
 8000678:	20000124 	.word	0x20000124

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b8:	f001 fc3c 	bl	8001f34 <HAL_I2C_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 f923 	bl	800090c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ca:	f001 ff43 	bl	8002554 <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f91a 	bl	800090c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006dc:	f001 ff85 	bl	80025ea <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f911 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000054 	.word	0x20000054
 80006f4:	40005400 	.word	0x40005400
 80006f8:	2000090e 	.word	0x2000090e

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f003 fc48 	bl	8003fd4 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f8df 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000a0 	.word	0x200000a0
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a2a      	ldr	r2, [pc, #168]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_GPIO_Init+0xc4>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a24      	ldr	r2, [pc, #144]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 fb93 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0xc8>)
 80007f6:	f001 f9fb 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fa:	2320      	movs	r3, #32
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f001 f9ec 	bl	8001bf0 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	48000800 	.word	0x48000800

08000828 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000832:	4a32      	ldr	r2, [pc, #200]	; (80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000834:	2100      	movs	r1, #0
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 fd60 	bl	80012fc <HAL_CAN_GetRxMessage>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8000842:	f000 f863 	bl	800090c <Error_Handler>
  }

  /* Display LEDx */
  if ((RxHeader.StdId == 0x321))
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f240 3221 	movw	r2, #801	; 0x321
 800084e:	4293      	cmp	r3, r2
 8000850:	d120      	bne.n	8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,RxData[0]);
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	2120      	movs	r1, #32
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f001 fb51 	bl	8001f04 <HAL_GPIO_WritePin>
    if(RxData[4] == 1){
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    	globalFail += 1;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e00d      	b.n	8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    }
    else if(RxData[4] == 0){
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d109      	bne.n	8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    	if(globalFail > 0){
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    		globalFail -= 1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000892:	701a      	strb	r2, [r3, #0]
    	}
    }
  }
  uint8_t can_rcv[] = "CAN RCV OK\r\n";
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000896:	f107 0408 	add.w	r4, r7, #8
 800089a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800089c:	c407      	stmia	r4!, {r0, r1, r2}
 800089e:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef status1 = HAL_UART_Transmit(&huart2,can_rcv,sizeof(can_rcv),100);// Sending in normal mode
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	220d      	movs	r2, #13
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80008aa:	f003 fbe1 	bl	8004070 <HAL_UART_Transmit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	75fb      	strb	r3, [r7, #23]
  if (status1 == HAL_OK) {

  }

  if (RxHeader.StdId == 0x322) {
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f240 3222 	movw	r2, #802	; 0x322
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d118      	bne.n	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
	  if(RxData[4] == 1){
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d106      	bne.n	80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		  globalFail += 1;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80008d0:	701a      	strb	r2, [r3, #0]
		  if(globalFail > 0){
			  globalFail -= 1;
	      }
	  }
  }
}
 80008d2:	e00d      	b.n	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
	  else if(RxData[4] == 0){
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d109      	bne.n	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		  if(globalFail > 0){
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d005      	beq.n	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
			  globalFail -= 1;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	20000160 	.word	0x20000160
 80008fc:	2000013c 	.word	0x2000013c
 8000900:	20000170 	.word	0x20000170
 8000904:	08004938 	.word	0x08004938
 8000908:	200000a0 	.word	0x200000a0

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094e:	2007      	movs	r0, #7
 8000950:	f001 f90c 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <HAL_CAN_MspInit+0x90>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d131      	bne.n	80009e6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_CAN_MspInit+0x94>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <HAL_CAN_MspInit+0x94>)
 8000988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_CAN_MspInit+0x94>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_CAN_MspInit+0x94>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <HAL_CAN_MspInit+0x94>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_CAN_MspInit+0x94>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80009c4:	2309      	movs	r3, #9
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f001 f90d 	bl	8001bf0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2014      	movs	r0, #20
 80009dc:	f001 f8d1 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80009e0:	2014      	movs	r0, #20
 80009e2:	f001 f8ea 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40006400 	.word	0x40006400
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <HAL_I2C_MspInit+0xb8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d145      	bne.n	8000aa6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a50:	2312      	movs	r3, #18
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f001 f8c1 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a72:	2312      	movs	r3, #18
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <HAL_I2C_MspInit+0xc0>)
 8000a8a:	f001 f8b1 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_I2C_MspInit+0xbc>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d128      	bne.n	8000b30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f001 f860 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f88e 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000b9a:	f000 fce7 	bl	800156c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000002c 	.word	0x2000002c

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f003 fe53 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fae9 	bl	80001d4 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c10:	08004988 	.word	0x08004988
  ldr r2, =_sbss
 8000c14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c18:	20000178 	.word	0x20000178

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 ff9b 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fe6c 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 ffb3 	bl	8001bd6 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 ff7b 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000000c 	.word	0x2000000c
 8000cd0:	20000174 	.word	0x20000174

08000cd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000174 	.word	0x20000174

08000cec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000000c 	.word	0x2000000c

08000d34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0ed      	b.n	8000f22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fe04 	bl	8000960 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d68:	f7ff ffb4 	bl	8000cd4 <HAL_GetTick>
 8000d6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d6e:	e012      	b.n	8000d96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d70:	f7ff ffb0 	bl	8000cd4 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	d90b      	bls.n	8000d96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2205      	movs	r2, #5
 8000d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0c5      	b.n	8000f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0e5      	beq.n	8000d70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0202 	bic.w	r2, r2, #2
 8000db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db4:	f7ff ff8e 	bl	8000cd4 <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dba:	e012      	b.n	8000de2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dbc:	f7ff ff8a 	bl	8000cd4 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b0a      	cmp	r3, #10
 8000dc8:	d90b      	bls.n	8000de2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2205      	movs	r2, #5
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e09f      	b.n	8000f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1e5      	bne.n	8000dbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7e1b      	ldrb	r3, [r3, #24]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d108      	bne.n	8000e0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e007      	b.n	8000e1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7e5b      	ldrb	r3, [r3, #25]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e007      	b.n	8000e44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7e9b      	ldrb	r3, [r3, #26]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d108      	bne.n	8000e5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0220 	orr.w	r2, r2, #32
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	e007      	b.n	8000e6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0220 	bic.w	r2, r2, #32
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7edb      	ldrb	r3, [r3, #27]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d108      	bne.n	8000e88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0210 	bic.w	r2, r2, #16
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e007      	b.n	8000e98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0210 	orr.w	r2, r2, #16
 8000e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7f1b      	ldrb	r3, [r3, #28]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0208 	orr.w	r2, r2, #8
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0208 	bic.w	r2, r2, #8
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7f5b      	ldrb	r3, [r3, #29]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0204 	orr.w	r2, r2, #4
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e007      	b.n	8000eec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0204 	bic.w	r2, r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	ea42 0103 	orr.w	r1, r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b087      	sub	sp, #28
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d003      	beq.n	8000f50 <HAL_CAN_ConfigFilter+0x26>
 8000f48:	7cfb      	ldrb	r3, [r7, #19]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	f040 80aa 	bne.w	80010a4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	2201      	movs	r2, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d123      	bne.n	8000fd2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3248      	adds	r2, #72	; 0x48
 8000fb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc8:	6979      	ldr	r1, [r7, #20]
 8000fca:	3348      	adds	r3, #72	; 0x48
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d122      	bne.n	8001020 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ffa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3248      	adds	r2, #72	; 0x48
 8001000:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001014:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001016:	6979      	ldr	r1, [r7, #20]
 8001018:	3348      	adds	r3, #72	; 0x48
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d109      	bne.n	800103c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800103a:	e007      	b.n	800104c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	431a      	orrs	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001066:	e007      	b.n	8001078 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	431a      	orrs	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001096:	f023 0201 	bic.w	r2, r3, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e006      	b.n	80010b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
  }
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d12e      	bne.n	8001130 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2202      	movs	r2, #2
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010ea:	f7ff fdf3 	bl	8000cd4 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010f0:	e012      	b.n	8001118 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f2:	f7ff fdef 	bl	8000cd4 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	d90b      	bls.n	8001118 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2205      	movs	r2, #5
 8001110:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e012      	b.n	800113e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1e5      	bne.n	80010f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	e006      	b.n	800113e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001146:	b480      	push	{r7}
 8001148:	b089      	sub	sp, #36	; 0x24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d003      	beq.n	8001172 <HAL_CAN_AddTxMessage+0x2c>
 800116a:	7ffb      	ldrb	r3, [r7, #31]
 800116c:	2b02      	cmp	r3, #2
 800116e:	f040 80b8 	bne.w	80012e2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a0 	beq.w	80012d2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	0e1b      	lsrs	r3, r3, #24
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d907      	bls.n	80011b2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e09e      	b.n	80012f0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10d      	bne.n	80011e0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011ce:	68f9      	ldr	r1, [r7, #12]
 80011d0:	6809      	ldr	r1, [r1, #0]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3318      	adds	r3, #24
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	440b      	add	r3, r1
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e00f      	b.n	8001200 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3318      	adds	r3, #24
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	440b      	add	r3, r1
 80011fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3318      	adds	r3, #24
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	7d1b      	ldrb	r3, [r3, #20]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d111      	bne.n	8001240 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3318      	adds	r3, #24
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	3304      	adds	r3, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	6811      	ldr	r1, [r2, #0]
 8001230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3318      	adds	r3, #24
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	440b      	add	r3, r1
 800123c:	3304      	adds	r3, #4
 800123e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3307      	adds	r3, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	061a      	lsls	r2, r3, #24
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3306      	adds	r3, #6
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3305      	adds	r3, #5
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4313      	orrs	r3, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	3204      	adds	r2, #4
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	6811      	ldr	r1, [r2, #0]
 8001268:	ea43 0200 	orr.w	r2, r3, r0
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	440b      	add	r3, r1
 8001272:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001276:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3303      	adds	r3, #3
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	061a      	lsls	r2, r3, #24
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3302      	adds	r3, #2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3301      	adds	r3, #1
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	4313      	orrs	r3, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4610      	mov	r0, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6811      	ldr	r1, [r2, #0]
 800129e:	ea43 0200 	orr.w	r2, r3, r0
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	440b      	add	r3, r1
 80012a8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3318      	adds	r3, #24
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	6811      	ldr	r1, [r2, #0]
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3318      	adds	r3, #24
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	440b      	add	r3, r1
 80012cc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e00e      	b.n	80012f0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e006      	b.n	80012f0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3724      	adds	r7, #36	; 0x24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001310:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d003      	beq.n	8001320 <HAL_CAN_GetRxMessage+0x24>
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b02      	cmp	r3, #2
 800131c:	f040 80f3 	bne.w	8001506 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10e      	bne.n	8001344 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d116      	bne.n	8001362 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0e7      	b.n	8001514 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d107      	bne.n	8001362 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0d8      	b.n	8001514 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	331b      	adds	r3, #27
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0204 	and.w	r2, r3, #4
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	331b      	adds	r3, #27
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0d5b      	lsrs	r3, r3, #21
 8001390:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e00b      	b.n	80013b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	331b      	adds	r3, #27
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	331b      	adds	r3, #27
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0202 	and.w	r2, r3, #2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	331b      	adds	r3, #27
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	3304      	adds	r3, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 020f 	and.w	r2, r3, #15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	331b      	adds	r3, #27
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	331b      	adds	r3, #27
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	3304      	adds	r3, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0a1a      	lsrs	r2, r3, #8
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0c1a      	lsrs	r2, r3, #16
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3302      	adds	r3, #2
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0e1a      	lsrs	r2, r3, #24
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3303      	adds	r3, #3
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3304      	adds	r3, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0a1a      	lsrs	r2, r3, #8
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3305      	adds	r3, #5
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0c1a      	lsrs	r2, r3, #16
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3306      	adds	r3, #6
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0e1a      	lsrs	r2, r3, #24
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3307      	adds	r3, #7
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	e007      	b.n	8001502 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0220 	orr.w	r2, r2, #32
 8001500:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e006      	b.n	8001514 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001530:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d002      	beq.n	800153e <HAL_CAN_ActivateNotification+0x1e>
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d109      	bne.n	8001552 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6959      	ldr	r1, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e006      	b.n	8001560 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d07c      	beq.n	80016ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f983 	bl	80018da <HAL_CAN_TxMailbox0CompleteCallback>
 80015d4:	e016      	b.n	8001604 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	e00c      	b.n	8001604 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	e002      	b.n	8001604 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f989 	bl	8001916 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d024      	beq.n	8001658 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001616:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f963 	bl	80018ee <HAL_CAN_TxMailbox1CompleteCallback>
 8001628:	e016      	b.n	8001658 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
 800163c:	e00c      	b.n	8001658 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	e002      	b.n	8001658 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f969 	bl	800192a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f943 	bl	8001902 <HAL_CAN_TxMailbox2CompleteCallback>
 800167c:	e016      	b.n	80016ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	e00c      	b.n	80016ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	e002      	b.n	80016ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f949 	bl	800193e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00c      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2208      	movs	r2, #8
 80016ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f930 	bl	8001952 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff f88c 	bl	8000828 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00c      	beq.n	8001734 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2210      	movs	r2, #16
 8001732:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2208      	movs	r2, #8
 800174e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f912 	bl	800197a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8f9 	bl	8001966 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2210      	movs	r2, #16
 800178e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8fc 	bl	800198e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00b      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2208      	movs	r2, #8
 80017b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8f5 	bl	80019a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d07b      	beq.n	80018ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d072      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001826:	2b00      	cmp	r3, #0
 8001828:	d043      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03e      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800183a:	2b60      	cmp	r3, #96	; 0x60
 800183c:	d02b      	beq.n	8001896 <HAL_CAN_IRQHandler+0x32a>
 800183e:	2b60      	cmp	r3, #96	; 0x60
 8001840:	d82e      	bhi.n	80018a0 <HAL_CAN_IRQHandler+0x334>
 8001842:	2b50      	cmp	r3, #80	; 0x50
 8001844:	d022      	beq.n	800188c <HAL_CAN_IRQHandler+0x320>
 8001846:	2b50      	cmp	r3, #80	; 0x50
 8001848:	d82a      	bhi.n	80018a0 <HAL_CAN_IRQHandler+0x334>
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d019      	beq.n	8001882 <HAL_CAN_IRQHandler+0x316>
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d826      	bhi.n	80018a0 <HAL_CAN_IRQHandler+0x334>
 8001852:	2b30      	cmp	r3, #48	; 0x30
 8001854:	d010      	beq.n	8001878 <HAL_CAN_IRQHandler+0x30c>
 8001856:	2b30      	cmp	r3, #48	; 0x30
 8001858:	d822      	bhi.n	80018a0 <HAL_CAN_IRQHandler+0x334>
 800185a:	2b10      	cmp	r3, #16
 800185c:	d002      	beq.n	8001864 <HAL_CAN_IRQHandler+0x2f8>
 800185e:	2b20      	cmp	r3, #32
 8001860:	d005      	beq.n	800186e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001862:	e01d      	b.n	80018a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800186c:	e019      	b.n	80018a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001876:	e014      	b.n	80018a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f043 0320 	orr.w	r3, r3, #32
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001880:	e00f      	b.n	80018a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800188a:	e00a      	b.n	80018a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001894:	e005      	b.n	80018a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800189e:	e000      	b.n	80018a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80018a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2204      	movs	r2, #4
 80018b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f872 	bl	80019b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff3e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff8e 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5d 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff31 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa2 	bl	8001b28 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e160      	b.n	8001ec2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8152 	beq.w	8001ebc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d005      	beq.n	8001c30 <HAL_GPIO_Init+0x40>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d130      	bne.n	8001c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d017      	beq.n	8001cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d123      	bne.n	8001d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	6939      	ldr	r1, [r7, #16]
 8001d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0203 	and.w	r2, r3, #3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80ac 	beq.w	8001ebc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d64:	4b5e      	ldr	r3, [pc, #376]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b5b      	ldr	r3, [pc, #364]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d7c:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001da6:	d025      	beq.n	8001df4 <HAL_GPIO_Init+0x204>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d01f      	beq.n	8001df0 <HAL_GPIO_Init+0x200>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_GPIO_Init+0x2fc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d019      	beq.n	8001dec <HAL_GPIO_Init+0x1fc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a4d      	ldr	r2, [pc, #308]	; (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1f8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1f4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_GPIO_Init+0x308>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1f0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <HAL_GPIO_Init+0x30c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1ec>
 8001dd8:	2306      	movs	r3, #6
 8001dda:	e00c      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001ddc:	2307      	movs	r3, #7
 8001dde:	e00a      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e008      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x206>
 8001df4:	2300      	movs	r3, #0
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e06:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e38:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e62:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f ae97 	bne.w	8001c00 <HAL_GPIO_Init+0x10>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	48001400 	.word	0x48001400
 8001efc:	48001800 	.word	0x48001800
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e081      	b.n	800204a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fd4c 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e006      	b.n	8001fbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d104      	bne.n	8001fce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69d9      	ldr	r1, [r3, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1a      	ldr	r2, [r3, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b088      	sub	sp, #32
 8002056:	af02      	add	r7, sp, #8
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	f040 80eb 	bne.w	8002246 <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_I2C_Slave_Receive+0x2a>
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0df      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Slave_Receive+0x44>
 8002092:	2302      	movs	r3, #2
 8002094:	e0d8      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800209e:	f7fe fe19 	bl	8000cd4 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2222      	movs	r2, #34	; 0x22
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020da:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2108      	movs	r1, #8
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f8d6 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002100:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0a0      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2208      	movs	r2, #8
 800210c:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8bc 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d048      	beq.n	80021b8 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002134:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e086      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f926 	bl	8002390 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d023      	beq.n	8002192 <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002158:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b04      	cmp	r3, #4
 8002166:	d112      	bne.n	800218e <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e05a      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1bb      	bne.n	800213a <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f8a6 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e030      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2220      	movs	r2, #32
 80021ec:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f84c 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002214:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e016      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002228:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d103      	bne.n	800226e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d007      	beq.n	800228c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	619a      	str	r2, [r3, #24]
  }
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a8:	e022      	b.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d01e      	beq.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7fe fd0f 	bl	8000cd4 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d113      	bne.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00f      	b.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4013      	ands	r3, r2
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	429a      	cmp	r2, r3
 800230c:	d0cd      	beq.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002324:	e028      	b.n	8002378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f89c 	bl	8002468 <I2C_IsAcknowledgeFailed>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e026      	b.n	8002388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7fe fccb 	bl	8000cd4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d113      	bne.n	8002378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b20      	cmp	r3, #32
 8002384:	d1cf      	bne.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800239c:	e055      	b.n	800244a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f860 	bl	8002468 <I2C_IsAcknowledgeFailed>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e053      	b.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d129      	bne.n	8002414 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d105      	bne.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e03f      	b.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2220      	movs	r2, #32
 80023e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e022      	b.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7fe fc5e 	bl	8000cd4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e007      	b.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d1a2      	bne.n	800239e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	fe00e800 	.word	0xfe00e800

08002468 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b10      	cmp	r3, #16
 8002480:	d161      	bne.n	8002546 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002490:	d02b      	beq.n	80024ea <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a2:	e022      	b.n	80024ea <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d01e      	beq.n	80024ea <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ac:	f7fe fc12 	bl	8000cd4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d302      	bcc.n	80024c2 <I2C_IsAcknowledgeFailed+0x5a>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d113      	bne.n	80024ea <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e02e      	b.n	8002548 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d1d5      	bne.n	80024a4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2210      	movs	r2, #16
 80024fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2220      	movs	r2, #32
 8002506:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff fea1 	bl	8002250 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <I2C_IsAcknowledgeFailed+0xe8>)
 800251a:	400b      	ands	r3, r1
 800251c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f043 0204 	orr.w	r2, r3, #4
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	fe00e800 	.word	0xfe00e800

08002554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	d138      	bne.n	80025dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002574:	2302      	movs	r3, #2
 8002576:	e032      	b.n	80025de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d139      	bne.n	8002674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800260a:	2302      	movs	r3, #2
 800260c:	e033      	b.n	8002676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2224      	movs	r2, #36	; 0x24
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800263c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800268a:	af00      	add	r7, sp, #0
 800268c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002694:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f001 b83a 	b.w	800371e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 816f 	beq.w	800299e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026c0:	4bb5      	ldr	r3, [pc, #724]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d00c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026cc:	4bb2      	ldr	r3, [pc, #712]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d15c      	bne.n	8002792 <HAL_RCC_OscConfig+0x10e>
 80026d8:	4baf      	ldr	r3, [pc, #700]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d155      	bne.n	8002792 <HAL_RCC_OscConfig+0x10e>
 80026e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_RCC_OscConfig+0x94>
 8002712:	4ba1      	ldr	r3, [pc, #644]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	e015      	b.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800272c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002730:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002734:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002740:	4b95      	ldr	r3, [pc, #596]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002748:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800274c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002750:	fa92 f2a2 	rbit	r2, r2
 8002754:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002758:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8111 	beq.w	800299c <HAL_RCC_OscConfig+0x318>
 800277a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8108 	bne.w	800299c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f000 bfc6 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002796:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12e>
 80027a4:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7b      	ldr	r2, [pc, #492]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e036      	b.n	8002820 <HAL_RCC_OscConfig+0x19c>
 80027b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x158>
 80027c2:	4b75      	ldr	r3, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a74      	ldr	r2, [pc, #464]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a71      	ldr	r2, [pc, #452]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e021      	b.n	8002820 <HAL_RCC_OscConfig+0x19c>
 80027dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x184>
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a69      	ldr	r2, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a66      	ldr	r2, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x19c>
 8002808:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a62      	ldr	r2, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b60      	ldr	r3, [pc, #384]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a5f      	ldr	r2, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002824:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d059      	beq.n	80028e4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fa50 	bl	8000cd4 <HAL_GetTick>
 8002834:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283a:	f7fe fa4b 	bl	8000cd4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d902      	bls.n	8002850 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	f000 bf67 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002864:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_RCC_OscConfig+0x1fe>
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x22a>
 8002882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002886:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800289e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80028b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80028ba:	fa92 f2a2 	rbit	r2, r2
 80028be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80028c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028c6:	fab2 f282 	clz	r2, r2
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f002 021f 	and.w	r2, r2, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ab      	beq.n	800283a <HAL_RCC_OscConfig+0x1b6>
 80028e2:	e05c      	b.n	800299e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f9f6 	bl	8000cd4 <HAL_GetTick>
 80028e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ee:	f7fe f9f1 	bl	8000cd4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d902      	bls.n	8002904 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	f000 bf0d 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
 8002904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002908:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002918:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0x2b2>
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x2de>
 8002936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800294a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002952:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_RCC_OscConfig+0x314>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002966:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800296a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800296e:	fa92 f2a2 	rbit	r2, r2
 8002972:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002976:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800297a:	fab2 f282 	clz	r2, r2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f002 021f 	and.w	r2, r2, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ab      	bne.n	80028ee <HAL_RCC_OscConfig+0x26a>
 8002996:	e002      	b.n	800299e <HAL_RCC_OscConfig+0x31a>
 8002998:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 817f 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029b4:	4ba7      	ldr	r3, [pc, #668]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029c0:	4ba4      	ldr	r3, [pc, #656]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d173      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x430>
 80029cc:	4ba1      	ldr	r3, [pc, #644]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	d16c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x430>
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80029ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_OscConfig+0x386>
 8002a04:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	e013      	b.n	8002a32 <HAL_RCC_OscConfig+0x3ae>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a22:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a2e:	4b89      	ldr	r3, [pc, #548]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	2202      	movs	r2, #2
 8002a34:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002a38:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002a3c:	fa92 f2a2 	rbit	r2, r2
 8002a40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002a44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a48:	fab2 f282 	clz	r2, r2
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f042 0220 	orr.w	r2, r2, #32
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f002 021f 	and.w	r2, r2, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCC_OscConfig+0x3f6>
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d002      	beq.n	8002a7a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f000 be52 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	21f8      	movs	r1, #248	; 0xf8
 8002a90:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002a98:	fa91 f1a1 	rbit	r1, r1
 8002a9c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002aa0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002aa4:	fab1 f181 	clz	r1, r1
 8002aa8:	b2c9      	uxtb	r1, r1
 8002aaa:	408b      	lsls	r3, r1
 8002aac:	4969      	ldr	r1, [pc, #420]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e0fe      	b.n	8002cb2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8088 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x552>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ad8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	461a      	mov	r2, r3
 8002aee:	2301      	movs	r3, #1
 8002af0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe f8ef 	bl	8000cd4 <HAL_GetTick>
 8002af6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afc:	f7fe f8ea 	bl	8000cd4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d902      	bls.n	8002b12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f000 be06 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
 8002b12:	2302      	movs	r3, #2
 8002b14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002b24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_OscConfig+0x4be>
 8002b3c:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	e013      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e6>
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002b74:	fa92 f2a2 	rbit	r2, r2
 8002b78:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002b7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f042 0220 	orr.w	r2, r2, #32
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f002 021f 	and.w	r2, r2, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0af      	beq.n	8002afc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	21f8      	movs	r1, #248	; 0xf8
 8002bb2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002bba:	fa91 f1a1 	rbit	r1, r1
 8002bbe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002bc2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bc6:	fab1 f181 	clz	r1, r1
 8002bca:	b2c9      	uxtb	r1, r1
 8002bcc:	408b      	lsls	r3, r1
 8002bce:	4921      	ldr	r1, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
 8002bd4:	e06d      	b.n	8002cb2 <HAL_RCC_OscConfig+0x62e>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002be8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe f867 	bl	8000cd4 <HAL_GetTick>
 8002c06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe f862 	bl	8000cd4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d902      	bls.n	8002c22 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f000 bd7e 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5d4>
 8002c4c:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <HAL_RCC_OscConfig+0x5d0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	e016      	b.n	8002c80 <HAL_RCC_OscConfig+0x5fc>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c7c:	4bbf      	ldr	r3, [pc, #764]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2202      	movs	r2, #2
 8002c82:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c86:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002c8a:	fa92 f2a2 	rbit	r2, r2
 8002c8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002c92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f042 0220 	orr.w	r2, r2, #32
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ac      	bne.n	8002c0c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8113 	beq.w	8002eee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x74e>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002cea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4ba2      	ldr	r3, [pc, #648]	; (8002f80 <HAL_RCC_OscConfig+0x8fc>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2301      	movs	r3, #1
 8002d00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fd ffe7 	bl	8000cd4 <HAL_GetTick>
 8002d06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fd ffe2 	bl	8000cd4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d902      	bls.n	8002d22 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f000 bcfe 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d42:	2202      	movs	r2, #2
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	4b7e      	ldr	r3, [pc, #504]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d8e:	2102      	movs	r1, #2
 8002d90:	6019      	str	r1, [r3, #0]
 8002d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f1a3 	rbit	r1, r3
 8002da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002da8:	6019      	str	r1, [r3, #0]
  return result;
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d09d      	beq.n	8002d0c <HAL_RCC_OscConfig+0x688>
 8002dd0:	e08d      	b.n	8002eee <HAL_RCC_OscConfig+0x86a>
 8002dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f2a3 	rbit	r2, r3
 8002dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002df4:	601a      	str	r2, [r3, #0]
  return result;
 8002df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dfe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x8fc>)
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e14:	f7fd ff5e 	bl	8000cd4 <HAL_GetTick>
 8002e18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fd ff59 	bl	8000cd4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	f000 bc75 	b.w	800371e <HAL_RCC_OscConfig+0x109a>
 8002e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e60:	2202      	movs	r2, #2
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002eac:	2102      	movs	r1, #2
 8002eae:	6019      	str	r1, [r3, #0]
 8002eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f1a3 	rbit	r1, r3
 8002ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ec6:	6019      	str	r1, [r3, #0]
  return result;
 8002ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ecc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d197      	bne.n	8002e1e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 81a5 	beq.w	800324e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d116      	bne.n	8002f44 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	61d3      	str	r3, [r2, #28]
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_RCC_OscConfig+0x8f8>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <HAL_RCC_OscConfig+0x900>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d121      	bne.n	8002f94 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <HAL_RCC_OscConfig+0x900>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <HAL_RCC_OscConfig+0x900>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5c:	f7fd feba 	bl	8000cd4 <HAL_GetTick>
 8002f60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e010      	b.n	8002f88 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fd feb5 	bl	8000cd4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d908      	bls.n	8002f88 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e3d1      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	10908120 	.word	0x10908120
 8002f84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b8d      	ldr	r3, [pc, #564]	; (80031c0 <HAL_RCC_OscConfig+0xb3c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0e8      	beq.n	8002f66 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x92e>
 8002fa4:	4b87      	ldr	r3, [pc, #540]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a86      	ldr	r2, [pc, #536]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	e035      	b.n	800301e <HAL_RCC_OscConfig+0x99a>
 8002fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x958>
 8002fc2:	4b80      	ldr	r3, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a7c      	ldr	r2, [pc, #496]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6213      	str	r3, [r2, #32]
 8002fda:	e020      	b.n	800301e <HAL_RCC_OscConfig+0x99a>
 8002fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x982>
 8002fec:	4b75      	ldr	r3, [pc, #468]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e00b      	b.n	800301e <HAL_RCC_OscConfig+0x99a>
 8003006:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a6b      	ldr	r2, [pc, #428]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003022:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8081 	beq.w	8003132 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fd fe50 	bl	8000cd4 <HAL_GetTick>
 8003034:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fd fe4b 	bl	8000cd4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e365      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
 8003052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003056:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003062:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003070:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800307e:	2202      	movs	r2, #2
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003086:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003094:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003098:	601a      	str	r2, [r3, #0]
  return result;
 800309a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0xa3a>
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	e013      	b.n	80030e6 <HAL_RCC_OscConfig+0xa62>
 80030be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030ee:	2102      	movs	r1, #2
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	fa92 f1a2 	rbit	r1, r2
 8003100:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003104:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003108:	6011      	str	r1, [r2, #0]
  return result;
 800310a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800310e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d084      	beq.n	800303a <HAL_RCC_OscConfig+0x9b6>
 8003130:	e083      	b.n	800323a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7fd fdcf 	bl	8000cd4 <HAL_GetTick>
 8003136:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fd fdca 	bl	8000cd4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e2e4      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
 8003154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003158:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800315c:	2202      	movs	r2, #2
 800315e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003164:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003172:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003180:	2202      	movs	r2, #2
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003188:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003196:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800319a:	601a      	str	r2, [r3, #0]
  return result;
 800319c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0xb44>
 80031ba:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_RCC_OscConfig+0xb40>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	e017      	b.n	80031f0 <HAL_RCC_OscConfig+0xb6c>
 80031c0:	40007000 	.word	0x40007000
 80031c4:	40021000 	.word	0x40021000
 80031c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031d0:	2202      	movs	r2, #2
 80031d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	fa93 f2a3 	rbit	r2, r3
 80031e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	4bb3      	ldr	r3, [pc, #716]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031f8:	2102      	movs	r1, #2
 80031fa:	6011      	str	r1, [r2, #0]
 80031fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003200:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	fa92 f1a2 	rbit	r1, r2
 800320a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800320e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003212:	6011      	str	r1, [r2, #0]
  return result;
 8003214:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003218:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	fab2 f282 	clz	r2, r2
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	f002 021f 	and.w	r2, r2, #31
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d180      	bne.n	800313c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800323a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b9e      	ldr	r3, [pc, #632]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a9d      	ldr	r2, [pc, #628]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003252:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 825e 	beq.w	800371c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003260:	4b96      	ldr	r3, [pc, #600]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	f000 821f 	beq.w	80036ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 8170 	bne.w	8003560 <HAL_RCC_OscConfig+0xedc>
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800328c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032a4:	601a      	str	r2, [r3, #0]
  return result;
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032ae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	461a      	mov	r2, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fd fd05 	bl	8000cd4 <HAL_GetTick>
 80032ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	e009      	b.n	80032e4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd fd00 	bl	8000cd4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e21c      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
 80032e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fa93 f2a3 	rbit	r2, r3
 8003300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003304:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003308:	601a      	str	r2, [r3, #0]
  return result;
 800330a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003312:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0xcaa>
 8003328:	4b64      	ldr	r3, [pc, #400]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	e027      	b.n	800337e <HAL_RCC_OscConfig+0xcfa>
 800332e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003332:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003340:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003358:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800335c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003366:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	4b50      	ldr	r3, [pc, #320]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003382:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003386:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338a:	6011      	str	r1, [r2, #0]
 800338c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003390:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	fa92 f1a2 	rbit	r1, r2
 800339a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800339e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80033a2:	6011      	str	r1, [r2, #0]
  return result;
 80033a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033a8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	fab2 f282 	clz	r2, r2
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f002 021f 	and.w	r2, r2, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f202 	lsl.w	r2, r1, r2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d182      	bne.n	80032d0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f023 020f 	bic.w	r2, r3, #15
 80033d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	4937      	ldr	r1, [pc, #220]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80033ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a19      	ldr	r1, [r3, #32]
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	430b      	orrs	r3, r1
 8003406:	492d      	ldr	r1, [pc, #180]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003410:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003430:	601a      	str	r2, [r3, #0]
  return result;
 8003432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003436:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800343a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003446:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	461a      	mov	r2, r3
 800344e:	2301      	movs	r3, #1
 8003450:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fd fc3f 	bl	8000cd4 <HAL_GetTick>
 8003456:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800345a:	e009      	b.n	8003470 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd fc3a 	bl	8000cd4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e156      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
 8003470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003474:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003482:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003490:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003494:	601a      	str	r2, [r3, #0]
  return result;
 8003496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800349e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0xe3c>
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <HAL_RCC_OscConfig+0xe38>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	e02a      	b.n	8003510 <HAL_RCC_OscConfig+0xe8c>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fa93 f2a3 	rbit	r2, r3
 80034dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003506:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	4b86      	ldr	r3, [pc, #536]	; (8003728 <HAL_RCC_OscConfig+0x10a4>)
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003514:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003518:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800351c:	6011      	str	r1, [r2, #0]
 800351e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003522:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	fa92 f1a2 	rbit	r1, r2
 800352c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003530:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003534:	6011      	str	r1, [r2, #0]
  return result;
 8003536:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800353a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f042 0220 	orr.w	r2, r2, #32
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f002 021f 	and.w	r2, r2, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f202 	lsl.w	r2, r1, r2
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	f43f af7f 	beq.w	800345c <HAL_RCC_OscConfig+0xdd8>
 800355e:	e0dd      	b.n	800371c <HAL_RCC_OscConfig+0x1098>
 8003560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003564:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003572:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003580:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003584:	601a      	str	r2, [r3, #0]
  return result;
 8003586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800358e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800359a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	461a      	mov	r2, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fd fb95 	bl	8000cd4 <HAL_GetTick>
 80035aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ae:	e009      	b.n	80035c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fb90 	bl	8000cd4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0ac      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
 80035c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035e8:	601a      	str	r2, [r3, #0]
  return result;
 80035ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_RCC_OscConfig+0xf8a>
 8003608:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_OscConfig+0x10a4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	e027      	b.n	800365e <HAL_RCC_OscConfig+0xfda>
 800360e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003612:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003620:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003638:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800363c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003646:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003654:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x10a4>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003662:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003666:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800366a:	6011      	str	r1, [r2, #0]
 800366c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003670:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	fa92 f1a2 	rbit	r1, r2
 800367a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800367e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003682:	6011      	str	r1, [r2, #0]
  return result;
 8003684:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003688:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f042 0220 	orr.w	r2, r2, #32
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d182      	bne.n	80035b0 <HAL_RCC_OscConfig+0xf2c>
 80036aa:	e037      	b.n	800371c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e02e      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_OscConfig+0x10a4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_RCC_OscConfig+0x10a4>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80036d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d117      	bne.n	8003718 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80036e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10b      	bne.n	8003718 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b09e      	sub	sp, #120	; 0x78
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e162      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b90      	ldr	r3, [pc, #576]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	498b      	ldr	r1, [pc, #556]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e14a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	497f      	ldr	r1, [pc, #508]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80dc 	beq.w	8003958 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d13c      	bne.n	8003822 <HAL_RCC_ClockConfig+0xf6>
 80037a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xa6>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e00f      	b.n	80037f2 <HAL_RCC_ClockConfig+0xc6>
 80037d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	667b      	str	r3, [r7, #100]	; 0x64
 80037e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
 80037e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17b      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0f3      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d13c      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x178>
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_RCC_ClockConfig+0x148>
 8003854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003858:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
 8003868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003878:	63ba      	str	r2, [r7, #56]	; 0x38
 800387a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13a      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b2      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 80038a4:	2302      	movs	r3, #2
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e00d      	b.n	80038e8 <HAL_RCC_ClockConfig+0x1bc>
 80038cc:	2302      	movs	r3, #2
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2202      	movs	r2, #2
 80038ea:	61ba      	str	r2, [r7, #24]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	fa92 f2a2 	rbit	r2, r2
 80038f2:	617a      	str	r2, [r7, #20]
  return result;
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e079      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	491a      	ldr	r1, [pc, #104]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd f9d4 	bl	8000cd4 <HAL_GetTick>
 800392c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd f9d0 	bl	8000cd4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e061      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d214      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4906      	ldr	r1, [pc, #24]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e040      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	491a      	ldr	r1, [pc, #104]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4912      	ldr	r1, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ce:	f000 f829 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	22f0      	movs	r2, #240	; 0xf0
 80039de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	fa92 f2a2 	rbit	r2, r2
 80039e6:	60fa      	str	r2, [r7, #12]
  return result;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	fab2 f282 	clz	r2, r2
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	40d3      	lsrs	r3, r2
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x2ec>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_RCC_ClockConfig+0x2f0>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x2f4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd f922 	bl	8000c4c <HAL_InitTick>
  
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3778      	adds	r7, #120	; 0x78
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08004948 	.word	0x08004948
 8003a1c:	20000004 	.word	0x20000004
 8003a20:	20000008 	.word	0x20000008

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x30>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x36>
 8003a52:	e03f      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a56:	623b      	str	r3, [r7, #32]
      break;
 8003a58:	e03f      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	fa92 f2a2 	rbit	r2, r2
 8003a6c:	607a      	str	r2, [r7, #4]
  return result;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	fab2 f282 	clz	r2, r2
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	40d3      	lsrs	r3, r2
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	220f      	movs	r2, #15
 8003a88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	fa92 f2a2 	rbit	r2, r2
 8003a90:	60fa      	str	r2, [r7, #12]
  return result;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	fab2 f282 	clz	r2, r2
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	40d3      	lsrs	r3, r2
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	e007      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	623b      	str	r3, [r7, #32]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ad6:	623b      	str	r3, [r7, #32]
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6a3b      	ldr	r3, [r7, #32]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	372c      	adds	r7, #44	; 0x2c
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	007a1200 	.word	0x007a1200
 8003af0:	08004960 	.word	0x08004960
 8003af4:	08004970 	.word	0x08004970

08003af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000004 	.word	0x20000004

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b16:	f7ff ffef 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	fa92 f2a2 	rbit	r2, r2
 8003b30:	603a      	str	r2, [r7, #0]
  return result;
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	40d3      	lsrs	r3, r2
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08004958 	.word	0x08004958

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b5a:	f7ff ffcd 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b5e:	4601      	mov	r1, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	603a      	str	r2, [r7, #0]
  return result;
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	40d3      	lsrs	r3, r2
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	08004958 	.word	0x08004958

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b092      	sub	sp, #72	; 0x48
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80d4 	beq.w	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbc:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10e      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a4a      	ldr	r2, [pc, #296]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
 8003bd4:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd f869 	bl	8000cd4 <HAL_GetTick>
 8003c02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fd f865 	bl	8000cd4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	; 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1d6      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8084 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d07c      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2301      	movs	r3, #1
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	461a      	mov	r2, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04b      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fd f815 	bl	8000cd4 <HAL_GetTick>
 8003caa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd f811 	bl	8000cd4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e180      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	61fb      	str	r3, [r7, #28]
  return result;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d108      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cf2:	4b01      	ldr	r3, [pc, #4]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	e00d      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	10908100 	.word	0x10908100
 8003d04:	2302      	movs	r3, #2
 8003d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	4b9a      	ldr	r3, [pc, #616]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	2202      	movs	r2, #2
 8003d16:	613a      	str	r2, [r7, #16]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	fa92 f2a2 	rbit	r2, r2
 8003d1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	fab2 f282 	clz	r2, r2
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	f002 021f 	and.w	r2, r2, #31
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f202 	lsl.w	r2, r1, r2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0b7      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d3e:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	498c      	ldr	r1, [pc, #560]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4a87      	ldr	r2, [pc, #540]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d70:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f023 0203 	bic.w	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	497f      	ldr	r1, [pc, #508]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4978      	ldr	r1, [pc, #480]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dac:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	4970      	ldr	r1, [pc, #448]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dca:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f023 0210 	bic.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4969      	ldr	r1, [pc, #420]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003de8:	4b64      	ldr	r3, [pc, #400]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	4961      	ldr	r1, [pc, #388]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f023 0220 	bic.w	r2, r3, #32
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	495a      	ldr	r1, [pc, #360]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e24:	4b55      	ldr	r3, [pc, #340]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	4952      	ldr	r1, [pc, #328]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e42:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	494b      	ldr	r1, [pc, #300]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e60:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4943      	ldr	r1, [pc, #268]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	493c      	ldr	r1, [pc, #240]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	4934      	ldr	r1, [pc, #208]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	492d      	ldr	r1, [pc, #180]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	4925      	ldr	r1, [pc, #148]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ef6:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	491e      	ldr	r1, [pc, #120]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	490f      	ldr	r1, [pc, #60]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	4907      	ldr	r1, [pc, #28]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f6e:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	4913      	ldr	r1, [pc, #76]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa0:	490b      	ldr	r1, [pc, #44]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbe:	4904      	ldr	r1, [pc, #16]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3748      	adds	r7, #72	; 0x48
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e040      	b.n	8004068 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fd60 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8c0 	bl	8004198 <UART_SetConfig>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e022      	b.n	8004068 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa8a 	bl	8004544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fb11 	bl	8004688 <UART_CheckIdleState>
 8004066:	4603      	mov	r3, r0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004084:	2b20      	cmp	r3, #32
 8004086:	f040 8082 	bne.w	800418e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_UART_Transmit+0x26>
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07a      	b.n	8004190 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Transmit+0x38>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e073      	b.n	8004190 <HAL_UART_Transmit+0x120>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2221      	movs	r2, #33	; 0x21
 80040bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fc fe09 	bl	8000cd4 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x80>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004100:	e02d      	b.n	800415e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fb04 	bl	800471a <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e039      	b.n	8004190 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412e:	b292      	uxth	r2, r2
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3302      	adds	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e008      	b.n	800414c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b292      	uxth	r2, r2
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1cb      	bne.n	8004102 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2140      	movs	r1, #64	; 0x40
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fad0 	bl	800471a <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e005      	b.n	8004190 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <UART_SetConfig+0x274>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a80      	ldr	r2, [pc, #512]	; (8004410 <UART_SetConfig+0x278>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d120      	bne.n	8004256 <UART_SetConfig+0xbe>
 8004214:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <UART_SetConfig+0x27c>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	2b03      	cmp	r3, #3
 800421e:	d817      	bhi.n	8004250 <UART_SetConfig+0xb8>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x90>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004239 	.word	0x08004239
 800422c:	08004245 	.word	0x08004245
 8004230:	0800424b 	.word	0x0800424b
 8004234:	0800423f 	.word	0x0800423f
 8004238:	2301      	movs	r3, #1
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e0b5      	b.n	80043aa <UART_SetConfig+0x212>
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e0b2      	b.n	80043aa <UART_SetConfig+0x212>
 8004244:	2304      	movs	r3, #4
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0af      	b.n	80043aa <UART_SetConfig+0x212>
 800424a:	2308      	movs	r3, #8
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0ac      	b.n	80043aa <UART_SetConfig+0x212>
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e0a9      	b.n	80043aa <UART_SetConfig+0x212>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6f      	ldr	r2, [pc, #444]	; (8004418 <UART_SetConfig+0x280>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d124      	bne.n	80042aa <UART_SetConfig+0x112>
 8004260:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <UART_SetConfig+0x27c>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004268:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800426c:	d011      	beq.n	8004292 <UART_SetConfig+0xfa>
 800426e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004272:	d817      	bhi.n	80042a4 <UART_SetConfig+0x10c>
 8004274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004278:	d011      	beq.n	800429e <UART_SetConfig+0x106>
 800427a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800427e:	d811      	bhi.n	80042a4 <UART_SetConfig+0x10c>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <UART_SetConfig+0xf4>
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d006      	beq.n	8004298 <UART_SetConfig+0x100>
 800428a:	e00b      	b.n	80042a4 <UART_SetConfig+0x10c>
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e08b      	b.n	80043aa <UART_SetConfig+0x212>
 8004292:	2302      	movs	r3, #2
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e088      	b.n	80043aa <UART_SetConfig+0x212>
 8004298:	2304      	movs	r3, #4
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e085      	b.n	80043aa <UART_SetConfig+0x212>
 800429e:	2308      	movs	r3, #8
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e082      	b.n	80043aa <UART_SetConfig+0x212>
 80042a4:	2310      	movs	r3, #16
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e07f      	b.n	80043aa <UART_SetConfig+0x212>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5b      	ldr	r2, [pc, #364]	; (800441c <UART_SetConfig+0x284>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d124      	bne.n	80042fe <UART_SetConfig+0x166>
 80042b4:	4b57      	ldr	r3, [pc, #348]	; (8004414 <UART_SetConfig+0x27c>)
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042c0:	d011      	beq.n	80042e6 <UART_SetConfig+0x14e>
 80042c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042c6:	d817      	bhi.n	80042f8 <UART_SetConfig+0x160>
 80042c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042cc:	d011      	beq.n	80042f2 <UART_SetConfig+0x15a>
 80042ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042d2:	d811      	bhi.n	80042f8 <UART_SetConfig+0x160>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <UART_SetConfig+0x148>
 80042d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042dc:	d006      	beq.n	80042ec <UART_SetConfig+0x154>
 80042de:	e00b      	b.n	80042f8 <UART_SetConfig+0x160>
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e061      	b.n	80043aa <UART_SetConfig+0x212>
 80042e6:	2302      	movs	r3, #2
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e05e      	b.n	80043aa <UART_SetConfig+0x212>
 80042ec:	2304      	movs	r3, #4
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e05b      	b.n	80043aa <UART_SetConfig+0x212>
 80042f2:	2308      	movs	r3, #8
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e058      	b.n	80043aa <UART_SetConfig+0x212>
 80042f8:	2310      	movs	r3, #16
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e055      	b.n	80043aa <UART_SetConfig+0x212>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a47      	ldr	r2, [pc, #284]	; (8004420 <UART_SetConfig+0x288>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d124      	bne.n	8004352 <UART_SetConfig+0x1ba>
 8004308:	4b42      	ldr	r3, [pc, #264]	; (8004414 <UART_SetConfig+0x27c>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004310:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004314:	d011      	beq.n	800433a <UART_SetConfig+0x1a2>
 8004316:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800431a:	d817      	bhi.n	800434c <UART_SetConfig+0x1b4>
 800431c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004320:	d011      	beq.n	8004346 <UART_SetConfig+0x1ae>
 8004322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004326:	d811      	bhi.n	800434c <UART_SetConfig+0x1b4>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <UART_SetConfig+0x19c>
 800432c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x1a8>
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x1b4>
 8004334:	2300      	movs	r3, #0
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e037      	b.n	80043aa <UART_SetConfig+0x212>
 800433a:	2302      	movs	r3, #2
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e034      	b.n	80043aa <UART_SetConfig+0x212>
 8004340:	2304      	movs	r3, #4
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e031      	b.n	80043aa <UART_SetConfig+0x212>
 8004346:	2308      	movs	r3, #8
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e02e      	b.n	80043aa <UART_SetConfig+0x212>
 800434c:	2310      	movs	r3, #16
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e02b      	b.n	80043aa <UART_SetConfig+0x212>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a33      	ldr	r2, [pc, #204]	; (8004424 <UART_SetConfig+0x28c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d124      	bne.n	80043a6 <UART_SetConfig+0x20e>
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <UART_SetConfig+0x27c>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004368:	d011      	beq.n	800438e <UART_SetConfig+0x1f6>
 800436a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800436e:	d817      	bhi.n	80043a0 <UART_SetConfig+0x208>
 8004370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004374:	d011      	beq.n	800439a <UART_SetConfig+0x202>
 8004376:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800437a:	d811      	bhi.n	80043a0 <UART_SetConfig+0x208>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <UART_SetConfig+0x1f0>
 8004380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004384:	d006      	beq.n	8004394 <UART_SetConfig+0x1fc>
 8004386:	e00b      	b.n	80043a0 <UART_SetConfig+0x208>
 8004388:	2300      	movs	r3, #0
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e00d      	b.n	80043aa <UART_SetConfig+0x212>
 800438e:	2302      	movs	r3, #2
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e00a      	b.n	80043aa <UART_SetConfig+0x212>
 8004394:	2304      	movs	r3, #4
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e007      	b.n	80043aa <UART_SetConfig+0x212>
 800439a:	2308      	movs	r3, #8
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e004      	b.n	80043aa <UART_SetConfig+0x212>
 80043a0:	2310      	movs	r3, #16
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e001      	b.n	80043aa <UART_SetConfig+0x212>
 80043a6:	2310      	movs	r3, #16
 80043a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	d16c      	bne.n	800448e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80043b4:	7ffb      	ldrb	r3, [r7, #31]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d838      	bhi.n	800442c <UART_SetConfig+0x294>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x228>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	080043ed 	.word	0x080043ed
 80043c8:	080043f5 	.word	0x080043f5
 80043cc:	0800442d 	.word	0x0800442d
 80043d0:	080043fb 	.word	0x080043fb
 80043d4:	0800442d 	.word	0x0800442d
 80043d8:	0800442d 	.word	0x0800442d
 80043dc:	0800442d 	.word	0x0800442d
 80043e0:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7ff fb94 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80043e8:	61b8      	str	r0, [r7, #24]
        break;
 80043ea:	e024      	b.n	8004436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7ff fbb2 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 80043f0:	61b8      	str	r0, [r7, #24]
        break;
 80043f2:	e020      	b.n	8004436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <UART_SetConfig+0x290>)
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e01d      	b.n	8004436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7ff fb13 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80043fe:	61b8      	str	r0, [r7, #24]
        break;
 8004400:	e019      	b.n	8004436 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004406:	61bb      	str	r3, [r7, #24]
        break;
 8004408:	e015      	b.n	8004436 <UART_SetConfig+0x29e>
 800440a:	bf00      	nop
 800440c:	efff69f3 	.word	0xefff69f3
 8004410:	40013800 	.word	0x40013800
 8004414:	40021000 	.word	0x40021000
 8004418:	40004400 	.word	0x40004400
 800441c:	40004800 	.word	0x40004800
 8004420:	40004c00 	.word	0x40004c00
 8004424:	40005000 	.word	0x40005000
 8004428:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	77bb      	strb	r3, [r7, #30]
        break;
 8004434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d075      	beq.n	8004528 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	005a      	lsls	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	441a      	add	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	d916      	bls.n	8004488 <UART_SetConfig+0x2f0>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d212      	bcs.n	8004488 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	b29a      	uxth	r2, r3
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	4313      	orrs	r3, r2
 800447c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	89fa      	ldrh	r2, [r7, #14]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	e04f      	b.n	8004528 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	77bb      	strb	r3, [r7, #30]
 800448c:	e04c      	b.n	8004528 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448e:	7ffb      	ldrb	r3, [r7, #31]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d828      	bhi.n	80044e6 <UART_SetConfig+0x34e>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x304>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044c9 	.word	0x080044c9
 80044a4:	080044d1 	.word	0x080044d1
 80044a8:	080044e7 	.word	0x080044e7
 80044ac:	080044d7 	.word	0x080044d7
 80044b0:	080044e7 	.word	0x080044e7
 80044b4:	080044e7 	.word	0x080044e7
 80044b8:	080044e7 	.word	0x080044e7
 80044bc:	080044df 	.word	0x080044df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7ff fb26 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80044c4:	61b8      	str	r0, [r7, #24]
        break;
 80044c6:	e013      	b.n	80044f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c8:	f7ff fb44 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 80044cc:	61b8      	str	r0, [r7, #24]
        break;
 80044ce:	e00f      	b.n	80044f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <UART_SetConfig+0x3a8>)
 80044d2:	61bb      	str	r3, [r7, #24]
        break;
 80044d4:	e00c      	b.n	80044f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d6:	f7ff faa5 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80044da:	61b8      	str	r0, [r7, #24]
        break;
 80044dc:	e008      	b.n	80044f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e004      	b.n	80044f0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	77bb      	strb	r3, [r7, #30]
        break;
 80044ee:	bf00      	nop
    }

    if (pclk != 0U)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	085a      	lsrs	r2, r3, #1
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	441a      	add	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	b29b      	uxth	r3, r3
 800450a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	d908      	bls.n	8004524 <UART_SetConfig+0x38c>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004518:	d204      	bcs.n	8004524 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	e001      	b.n	8004528 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004534:	7fbb      	ldrb	r3, [r7, #30]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	007a1200 	.word	0x007a1200

08004544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01a      	beq.n	800465a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004642:	d10a      	bne.n	800465a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  }
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004698:	f7fc fb1c 	bl	8000cd4 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d10e      	bne.n	80046ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f82d 	bl	800471a <UART_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e023      	b.n	8004712 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d10e      	bne.n	80046f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f817 	bl	800471a <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e00d      	b.n	8004712 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b09c      	sub	sp, #112	; 0x70
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	4613      	mov	r3, r2
 8004728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472a:	e0a5      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	f000 80a1 	beq.w	8004878 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fc facd 	bl	8000cd4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <UART_WaitOnFlagUntilTimeout+0x32>
 8004746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004748:	2b00      	cmp	r3, #0
 800474a:	d13e      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800475a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004760:	667b      	str	r3, [r7, #100]	; 0x64
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800476a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800476c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e6      	bne.n	800474c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	663b      	str	r3, [r7, #96]	; 0x60
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3308      	adds	r3, #8
 800479c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800479e:	64ba      	str	r2, [r7, #72]	; 0x48
 80047a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e5      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e067      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d04f      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e6:	d147      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
 8004812:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e6      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	613b      	str	r3, [r7, #16]
   return(result);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004844:	623a      	str	r2, [r7, #32]
 8004846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	69f9      	ldr	r1, [r7, #28]
 800484a:	6a3a      	ldr	r2, [r7, #32]
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	61bb      	str	r3, [r7, #24]
   return(result);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e010      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	429a      	cmp	r2, r3
 8004894:	f43f af4a 	beq.w	800472c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3770      	adds	r7, #112	; 0x70
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	; (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	; (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	; (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	; (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 f820 	bl	80048fc <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	08004980 	.word	0x08004980
 80048e0:	08004980 	.word	0x08004980
 80048e4:	08004980 	.word	0x08004980
 80048e8:	08004984 	.word	0x08004984

080048ec <memset>:
 80048ec:	4402      	add	r2, r0
 80048ee:	4603      	mov	r3, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
