
uart-proxy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800479c  0800479c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800479c  0800479c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800479c  0800479c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000158  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000164  20000164  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e47d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb5  00000000  00000000  0002e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  00030170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00030c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff46  00000000  00000000  00031618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1ee  00000000  00000000  0005155e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2810  00000000  00000000  0005f74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121f5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c3c  00000000  00000000  00121fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004714 	.word	0x08004714

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004714 	.word	0x08004714

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b096      	sub	sp, #88	; 0x58
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fc2d 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f8b5 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fa01 	bl	80005e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 f9cf 	bl	8000588 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001ea:	f000 f98d 	bl	8000508 <MX_I2C1_Init>
  MX_CAN_Init();
 80001ee:	f000 f90d 	bl	800040c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  volatile uint8_t buf[4];
  uint8_t send_ok[] = "CAN SEND OK\r\n";
 80001f2:	4b4d      	ldr	r3, [pc, #308]	; (8000328 <main+0x154>)
 80001f4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80001f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001fa:	c407      	stmia	r4!, {r0, r1, r2}
 80001fc:	8023      	strh	r3, [r4, #0]
  uint8_t send_bad[] = "CAN SEND ERROR\r\n";
 80001fe:	4b4b      	ldr	r3, [pc, #300]	; (800032c <main+0x158>)
 8000200:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000204:	461d      	mov	r5, r3
 8000206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020a:	682b      	ldr	r3, [r5, #0]
 800020c:	7023      	strb	r3, [r4, #0]
	//}
	uint8_t printWord[20];
	uint8_t printWord2[20];


	HAL_StatusTypeDef rcvSt =  HAL_I2C_Slave_Receive(&hi2c1, &buf[0], 1, HAL_MAX_DELAY);
 800020e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000212:	f04f 33ff 	mov.w	r3, #4294967295
 8000216:	2201      	movs	r2, #1
 8000218:	4845      	ldr	r0, [pc, #276]	; (8000330 <main+0x15c>)
 800021a:	f001 fe26 	bl	8001e6a <HAL_I2C_Slave_Receive>
 800021e:	4603      	mov	r3, r0
 8000220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  	//strcpy(buf, "hello\n");
  	//HAL_UART_Transmit(&huart2, buf, 4, 200);
  	//HAL_UART_Transmit(&huart2, "\r\n", 3, 200);
	//HAL_UART_Transmit(&huart2, "first: ", sizeof("first: "), 200);
  	HAL_UART_Transmit(&huart2, &buf[0], 1, 200);
 8000224:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000228:	23c8      	movs	r3, #200	; 0xc8
 800022a:	2201      	movs	r2, #1
 800022c:	4841      	ldr	r0, [pc, #260]	; (8000334 <main+0x160>)
 800022e:	f003 fe2b 	bl	8003e88 <HAL_UART_Transmit>
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[1], 1, HAL_MAX_DELAY);
 8000232:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000236:	1c59      	adds	r1, r3, #1
 8000238:	f04f 33ff 	mov.w	r3, #4294967295
 800023c:	2201      	movs	r2, #1
 800023e:	483c      	ldr	r0, [pc, #240]	; (8000330 <main+0x15c>)
 8000240:	f001 fe13 	bl	8001e6a <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", second: ", sizeof(", second:"), 200);
  	HAL_UART_Transmit(&huart2, &buf[1], 1, 200);
 8000244:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	23c8      	movs	r3, #200	; 0xc8
 800024c:	2201      	movs	r2, #1
 800024e:	4839      	ldr	r0, [pc, #228]	; (8000334 <main+0x160>)
 8000250:	f003 fe1a 	bl	8003e88 <HAL_UART_Transmit>
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[2], 1, HAL_MAX_DELAY);
 8000254:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000258:	1c99      	adds	r1, r3, #2
 800025a:	f04f 33ff 	mov.w	r3, #4294967295
 800025e:	2201      	movs	r2, #1
 8000260:	4833      	ldr	r0, [pc, #204]	; (8000330 <main+0x15c>)
 8000262:	f001 fe02 	bl	8001e6a <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", thrid: ", sizeof(", thrid: "), 200);
  	HAL_UART_Transmit(&huart2, &buf[2], 1, 200);
 8000266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026a:	1c99      	adds	r1, r3, #2
 800026c:	23c8      	movs	r3, #200	; 0xc8
 800026e:	2201      	movs	r2, #1
 8000270:	4830      	ldr	r0, [pc, #192]	; (8000334 <main+0x160>)
 8000272:	f003 fe09 	bl	8003e88 <HAL_UART_Transmit>
  	HAL_I2C_Slave_Receive(&hi2c1, &buf[3], 1, HAL_MAX_DELAY);
 8000276:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800027a:	1cd9      	adds	r1, r3, #3
 800027c:	f04f 33ff 	mov.w	r3, #4294967295
 8000280:	2201      	movs	r2, #1
 8000282:	482b      	ldr	r0, [pc, #172]	; (8000330 <main+0x15c>)
 8000284:	f001 fdf1 	bl	8001e6a <HAL_I2C_Slave_Receive>
  	//HAL_UART_Transmit(&huart2, ", fourth:", sizeof(", fourth: "), 200);
	HAL_UART_Transmit(&huart2, &buf[3], 1, 200);
 8000288:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800028c:	1cd9      	adds	r1, r3, #3
 800028e:	23c8      	movs	r3, #200	; 0xc8
 8000290:	2201      	movs	r2, #1
 8000292:	4828      	ldr	r0, [pc, #160]	; (8000334 <main+0x160>)
 8000294:	f003 fdf8 	bl	8003e88 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 3, 200);
 8000298:	23c8      	movs	r3, #200	; 0xc8
 800029a:	2203      	movs	r2, #3
 800029c:	4926      	ldr	r1, [pc, #152]	; (8000338 <main+0x164>)
 800029e:	4825      	ldr	r0, [pc, #148]	; (8000334 <main+0x160>)
 80002a0:	f003 fdf2 	bl	8003e88 <HAL_UART_Transmit>
  		TxData[1] = 0;
  		HAL_UART_Transmit(&huart2, "No Thr\r\n", strlen("No Thr\r\n") + 1, 200);
  	}
  	*/

  	TxData[0] = buf[0]; //Wheel Angle (25-125
 80002a4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b24      	ldr	r3, [pc, #144]	; (800033c <main+0x168>)
 80002ac:	701a      	strb	r2, [r3, #0]
  	TxData[1] = buf[1]; // Throttle Angle (0-100)
 80002ae:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b21      	ldr	r3, [pc, #132]	; (800033c <main+0x168>)
 80002b6:	705a      	strb	r2, [r3, #1]
  	TxData[2] = buf[2]; // Brake (0-100)
 80002b8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <main+0x168>)
 80002c0:	709a      	strb	r2, [r3, #2]
  	TxData[3] = buf[3]; // Blinkers (0, 1, 2)
 80002c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <main+0x168>)
 80002ca:	70da      	strb	r2, [r3, #3]

  	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80002cc:	4b1c      	ldr	r3, [pc, #112]	; (8000340 <main+0x16c>)
 80002ce:	4a1b      	ldr	r2, [pc, #108]	; (800033c <main+0x168>)
 80002d0:	491c      	ldr	r1, [pc, #112]	; (8000344 <main+0x170>)
 80002d2:	481d      	ldr	r0, [pc, #116]	; (8000348 <main+0x174>)
 80002d4:	f000 fe43 	bl	8000f5e <HAL_CAN_AddTxMessage>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d00b      	beq.n	80002f6 <main+0x122>
  	{

  	  //Transmission request Error

  		HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,send_bad,sizeof(send_bad),100);// Sending in normal mode
 80002de:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	2211      	movs	r2, #17
 80002e6:	4813      	ldr	r0, [pc, #76]	; (8000334 <main+0x160>)
 80002e8:	f003 fdce 	bl	8003e88 <HAL_UART_Transmit>
 80002ec:	4603      	mov	r3, r0
 80002ee:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  		if (status == HAL_OK) {
  		}
  	  Error_Handler();
 80002f2:	f000 fa17 	bl	8000724 <Error_Handler>
  	}
  	HAL_Delay(10);
 80002f6:	200a      	movs	r0, #10
 80002f8:	f000 fc04 	bl	8000b04 <HAL_Delay>
  	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,send_ok,sizeof(send_ok),100);// Sending in normal mode
 80002fc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	220e      	movs	r2, #14
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <main+0x160>)
 8000306:	f003 fdbf 	bl	8003e88 <HAL_UART_Transmit>
 800030a:	4603      	mov	r3, r0
 800030c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  	if (status == HAL_OK) {
 8000310:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000314:	2b00      	cmp	r3, #0
 8000316:	f47f af7a 	bne.w	800020e <main+0x3a>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800031a:	2201      	movs	r2, #1
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f001 fcfb 	bl	8001d1c <HAL_GPIO_WritePin>
  {
 8000326:	e772      	b.n	800020e <main+0x3a>
 8000328:	08004730 	.word	0x08004730
 800032c:	08004740 	.word	0x08004740
 8000330:	20000050 	.word	0x20000050
 8000334:	2000009c 	.word	0x2000009c
 8000338:	0800472c 	.word	0x0800472c
 800033c:	20000154 	.word	0x20000154
 8000340:	2000015c 	.word	0x2000015c
 8000344:	20000120 	.word	0x20000120
 8000348:	20000028 	.word	0x20000028

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b0a6      	sub	sp, #152	; 0x98
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 f9d2 	bl	8004704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2258      	movs	r2, #88	; 0x58
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f004 f9c4 	bl	8004704 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037c:	2302      	movs	r3, #2
 800037e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	2310      	movs	r3, #16
 8000386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	2302      	movs	r3, #2
 800038c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000398:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800039c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f876 	bl	800249c <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f9b5 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2302      	movs	r3, #2
 80003c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 f8b4 	bl	8003544 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e2:	f000 f99f 	bl	8000724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80003e6:	2322      	movs	r3, #34	; 0x22
 80003e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ee:	2300      	movs	r3, #0
 80003f0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4618      	mov	r0, r3
 80003f6:	f003 fadb 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000400:	f000 f990 	bl	8000724 <Error_Handler>
  }
}
 8000404:	bf00      	nop
 8000406:	3798      	adds	r7, #152	; 0x98
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08a      	sub	sp, #40	; 0x28
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000412:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <MX_CAN_Init+0xf0>)
 8000414:	4a3a      	ldr	r2, [pc, #232]	; (8000500 <MX_CAN_Init+0xf4>)
 8000416:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <MX_CAN_Init+0xf0>)
 800041a:	2210      	movs	r2, #16
 800041c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800041e:	4b37      	ldr	r3, [pc, #220]	; (80004fc <MX_CAN_Init+0xf0>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000424:	4b35      	ldr	r3, [pc, #212]	; (80004fc <MX_CAN_Init+0xf0>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800042a:	4b34      	ldr	r3, [pc, #208]	; (80004fc <MX_CAN_Init+0xf0>)
 800042c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000430:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <MX_CAN_Init+0xf0>)
 8000434:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000438:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_CAN_Init+0xf0>)
 800043c:	2200      	movs	r2, #0
 800043e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <MX_CAN_Init+0xf0>)
 8000442:	2200      	movs	r2, #0
 8000444:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_CAN_Init+0xf0>)
 8000448:	2200      	movs	r2, #0
 800044a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <MX_CAN_Init+0xf0>)
 800044e:	2200      	movs	r2, #0
 8000450:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_CAN_Init+0xf0>)
 8000454:	2200      	movs	r2, #0
 8000456:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000458:	4b28      	ldr	r3, [pc, #160]	; (80004fc <MX_CAN_Init+0xf0>)
 800045a:	2200      	movs	r2, #0
 800045c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800045e:	4827      	ldr	r0, [pc, #156]	; (80004fc <MX_CAN_Init+0xf0>)
 8000460:	f000 fb74 	bl	8000b4c <HAL_CAN_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800046a:	f000 f95b 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	sFilterConfig.FilterIdHigh = 0x0000;
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800048a:	2301      	movs	r3, #1
 800048c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800048e:	2301      	movs	r3, #1
 8000490:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000492:	230e      	movs	r3, #14
 8000494:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	4818      	ldr	r0, [pc, #96]	; (80004fc <MX_CAN_Init+0xf0>)
 800049c:	f000 fc51 	bl	8000d42 <HAL_CAN_ConfigFilter>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_CAN_Init+0x9e>
	  {
		/* Filter configuration Error */
		Error_Handler();
 80004a6:	f000 f93d 	bl	8000724 <Error_Handler>
	  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80004aa:	4814      	ldr	r0, [pc, #80]	; (80004fc <MX_CAN_Init+0xf0>)
 80004ac:	f000 fd13 	bl	8000ed6 <HAL_CAN_Start>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_CAN_Init+0xae>
  {
	/* Start Error */
	Error_Handler();
 80004b6:	f000 f935 	bl	8000724 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80004ba:	2102      	movs	r1, #2
 80004bc:	480f      	ldr	r0, [pc, #60]	; (80004fc <MX_CAN_Init+0xf0>)
 80004be:	f000 ff3b 	bl	8001338 <HAL_CAN_ActivateNotification>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_CAN_Init+0xc0>
  {
	/* Notification Error */
	Error_Handler();
 80004c8:	f000 f92c 	bl	8000724 <Error_Handler>
  }

  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = 0x320;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <MX_CAN_Init+0xf8>)
 80004ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80004d2:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_CAN_Init+0xf8>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MX_CAN_Init+0xf8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_CAN_Init+0xf8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <MX_CAN_Init+0xf8>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MX_CAN_Init+0xf8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000028 	.word	0x20000028
 8000500:	40006400 	.word	0x40006400
 8000504:	20000120 	.word	0x20000120

08000508 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_I2C1_Init+0x74>)
 800050e:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <MX_I2C1_Init+0x78>)
 8000510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_I2C1_Init+0x74>)
 8000514:	4a1b      	ldr	r2, [pc, #108]	; (8000584 <MX_I2C1_Init+0x7c>)
 8000516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_I2C1_Init+0x74>)
 8000520:	2201      	movs	r2, #1
 8000522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_I2C1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_I2C1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <MX_I2C1_Init+0x74>)
 8000544:	f001 fc02 	bl	8001d4c <HAL_I2C_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800054e:	f000 f8e9 	bl	8000724 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000552:	2100      	movs	r1, #0
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <MX_I2C1_Init+0x74>)
 8000556:	f001 ff09 	bl	800236c <HAL_I2CEx_ConfigAnalogFilter>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000560:	f000 f8e0 	bl	8000724 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000564:	2100      	movs	r1, #0
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_I2C1_Init+0x74>)
 8000568:	f001 ff4b 	bl	8002402 <HAL_I2CEx_ConfigDigitalFilter>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000572:	f000 f8d7 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000050 	.word	0x20000050
 8000580:	40005400 	.word	0x40005400
 8000584:	2000090e 	.word	0x2000090e

08000588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <MX_USART2_UART_Init+0x5c>)
 8000590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 8000594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_USART2_UART_Init+0x58>)
 80005cc:	f003 fc0e 	bl	8003dec <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005d6:	f000 f8a5 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	40004400 	.word	0x40004400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <MX_GPIO_Init+0xc4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <MX_GPIO_Init+0xc4>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_GPIO_Init+0xc4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <MX_GPIO_Init+0xc4>)
 800064c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_GPIO_Init+0xc4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f001 fb59 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000670:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000682:	f001 f9c1 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000686:	2320      	movs	r3, #32
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f001 f9b2 	bl	8001a08 <HAL_GPIO_Init>

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000800 	.word	0x48000800

080006b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80006be:	4a16      	ldr	r2, [pc, #88]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 fd26 	bl	8001114 <HAL_CAN_GetRxMessage>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80006ce:	f000 f829 	bl	8000724 <Error_Handler>
  }

  /* Display LEDx */
  if ((RxHeader.StdId == 0x321))
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f240 3221 	movw	r2, #801	; 0x321
 80006da:	4293      	cmp	r3, r2
 80006dc:	d107      	bne.n	80006ee <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,RxData[0]);
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	2120      	movs	r1, #32
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f001 fb17 	bl	8001d1c <HAL_GPIO_WritePin>
  }
  uint8_t can_rcv[] = "CAN RCV OK\r\n";
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80006f0:	f107 0408 	add.w	r4, r7, #8
 80006f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f6:	c407      	stmia	r4!, {r0, r1, r2}
 80006f8:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef status1 = HAL_UART_Transmit(&huart2,can_rcv,sizeof(can_rcv),100);// Sending in normal mode
 80006fa:	f107 0108 	add.w	r1, r7, #8
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	220d      	movs	r2, #13
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000704:	f003 fbc0 	bl	8003e88 <HAL_UART_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	75fb      	strb	r3, [r7, #23]
	}

	if (RxHeader.StdId == 0x322) {

	}
}
 800070c:	bf00      	nop
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	20000158 	.word	0x20000158
 8000718:	20000138 	.word	0x20000138
 800071c:	08004754 	.word	0x08004754
 8000720:	2000009c 	.word	0x2000009c

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x44>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000766:	2007      	movs	r0, #7
 8000768:	f001 f90c 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <HAL_CAN_MspInit+0x90>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d131      	bne.n	80007fe <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_CAN_MspInit+0x94>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <HAL_CAN_MspInit+0x94>)
 80007a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_CAN_MspInit+0x94>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_CAN_MspInit+0x94>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <HAL_CAN_MspInit+0x94>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <HAL_CAN_MspInit+0x94>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80007dc:	2309      	movs	r3, #9
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f001 f90d 	bl	8001a08 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2014      	movs	r0, #20
 80007f4:	f001 f8d1 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80007f8:	2014      	movs	r0, #20
 80007fa:	f001 f8ea 	bl	80019d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40006400 	.word	0x40006400
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <HAL_I2C_MspInit+0xb8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d145      	bne.n	80008be <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000874:	2304      	movs	r3, #4
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f001 f8c1 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088a:	2312      	movs	r3, #18
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000896:	2304      	movs	r3, #4
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <HAL_I2C_MspInit+0xc0>)
 80008a2:	f001 f8b1 	bl	8001a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 80008ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_I2C_MspInit+0xbc>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40005400 	.word	0x40005400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_UART_MspInit+0x7c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d128      	bne.n	8000948 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x80>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <HAL_UART_MspInit+0x80>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_UART_MspInit+0x80>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x80>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x80>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_MspInit+0x80>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f001 f860 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f88e 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80009b2:	f000 fce7 	bl	8001384 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000028 	.word	0x20000028

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f003 fe53 	bl	80046bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fbdd 	bl	80001d4 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	20000164 	.word	0x20000164

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x28>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x28>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 ff9b 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fe6c 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 ffb3 	bl	80019ee <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 ff7b 	bl	800199a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000160 	.word	0x20000160

08000aec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000160 	.word	0x20000160

08000b04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e0ed      	b.n	8000d3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe04 	bl	8000778 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b80:	f7ff ffb4 	bl	8000aec <HAL_GetTick>
 8000b84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b86:	e012      	b.n	8000bae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b88:	f7ff ffb0 	bl	8000aec <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b0a      	cmp	r3, #10
 8000b94:	d90b      	bls.n	8000bae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e0c5      	b.n	8000d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0e5      	beq.n	8000b88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0202 	bic.w	r2, r2, #2
 8000bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bcc:	f7ff ff8e 	bl	8000aec <HAL_GetTick>
 8000bd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bd2:	e012      	b.n	8000bfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bd4:	f7ff ff8a 	bl	8000aec <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	d90b      	bls.n	8000bfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e09f      	b.n	8000d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e5      	bne.n	8000bd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e1b      	ldrb	r3, [r3, #24]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d108      	bne.n	8000c22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7e5b      	ldrb	r3, [r3, #25]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d108      	bne.n	8000c4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7e9b      	ldrb	r3, [r3, #26]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0220 	orr.w	r2, r2, #32
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e007      	b.n	8000c86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0220 	bic.w	r2, r2, #32
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7edb      	ldrb	r3, [r3, #27]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d108      	bne.n	8000ca0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0210 	bic.w	r2, r2, #16
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e007      	b.n	8000cb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0210 	orr.w	r2, r2, #16
 8000cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7f1b      	ldrb	r3, [r3, #28]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d108      	bne.n	8000cca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0208 	orr.w	r2, r2, #8
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e007      	b.n	8000cda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 0208 	bic.w	r2, r2, #8
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7f5b      	ldrb	r3, [r3, #29]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d108      	bne.n	8000cf4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0204 	orr.w	r2, r2, #4
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e007      	b.n	8000d04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0204 	bic.w	r2, r2, #4
 8000d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	ea42 0103 	orr.w	r1, r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b087      	sub	sp, #28
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d5a:	7cfb      	ldrb	r3, [r7, #19]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d003      	beq.n	8000d68 <HAL_CAN_ConfigFilter+0x26>
 8000d60:	7cfb      	ldrb	r3, [r7, #19]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	f040 80aa 	bne.w	8000ebc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	2201      	movs	r2, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d123      	bne.n	8000dea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3248      	adds	r2, #72	; 0x48
 8000dca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de0:	6979      	ldr	r1, [r7, #20]
 8000de2:	3348      	adds	r3, #72	; 0x48
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d122      	bne.n	8000e38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3248      	adds	r2, #72	; 0x48
 8000e18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e2e:	6979      	ldr	r1, [r7, #20]
 8000e30:	3348      	adds	r3, #72	; 0x48
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	440b      	add	r3, r1
 8000e36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d109      	bne.n	8000e54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e52:	e007      	b.n	8000e64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d109      	bne.n	8000e80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d107      	bne.n	8000ea8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eae:	f023 0201 	bic.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e006      	b.n	8000eca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
  }
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d12e      	bne.n	8000f48 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2202      	movs	r2, #2
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f02:	f7ff fdf3 	bl	8000aec <HAL_GetTick>
 8000f06:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f08:	e012      	b.n	8000f30 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f0a:	f7ff fdef 	bl	8000aec <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b0a      	cmp	r3, #10
 8000f16:	d90b      	bls.n	8000f30 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2205      	movs	r2, #5
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e012      	b.n	8000f56 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1e5      	bne.n	8000f0a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e006      	b.n	8000f56 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
  }
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b089      	sub	sp, #36	; 0x24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d003      	beq.n	8000f8a <HAL_CAN_AddTxMessage+0x2c>
 8000f82:	7ffb      	ldrb	r3, [r7, #31]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	f040 80b8 	bne.w	80010fa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10a      	bne.n	8000faa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a0 	beq.w	80010ea <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	0e1b      	lsrs	r3, r3, #24
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d907      	bls.n	8000fca <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e09e      	b.n	8001108 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10d      	bne.n	8000ff8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	6809      	ldr	r1, [r1, #0]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3318      	adds	r3, #24
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	440b      	add	r3, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00f      	b.n	8001018 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001002:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800100c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3318      	adds	r3, #24
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	440b      	add	r3, r1
 8001016:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3318      	adds	r3, #24
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	440b      	add	r3, r1
 8001028:	3304      	adds	r3, #4
 800102a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	7d1b      	ldrb	r3, [r3, #20]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d111      	bne.n	8001058 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3318      	adds	r3, #24
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3318      	adds	r3, #24
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3307      	adds	r3, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	061a      	lsls	r2, r3, #24
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3306      	adds	r3, #6
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3305      	adds	r3, #5
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	4313      	orrs	r3, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	3204      	adds	r2, #4
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	4610      	mov	r0, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	6811      	ldr	r1, [r2, #0]
 8001080:	ea43 0200 	orr.w	r2, r3, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800108e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3303      	adds	r3, #3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	061a      	lsls	r2, r3, #24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3302      	adds	r3, #2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4313      	orrs	r3, r2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4610      	mov	r0, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	6811      	ldr	r1, [r2, #0]
 80010b6:	ea43 0200 	orr.w	r2, r3, r0
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3318      	adds	r3, #24
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3318      	adds	r3, #24
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	440b      	add	r3, r1
 80010e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e00e      	b.n	8001108 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e006      	b.n	8001108 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	3724      	adds	r7, #36	; 0x24
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001128:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d003      	beq.n	8001138 <HAL_CAN_GetRxMessage+0x24>
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	2b02      	cmp	r3, #2
 8001134:	f040 80f3 	bne.w	800131e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10e      	bne.n	800115c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d116      	bne.n	800117a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0e7      	b.n	800132c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0d8      	b.n	800132c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	331b      	adds	r3, #27
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0204 	and.w	r2, r3, #4
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10c      	bne.n	80011b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	331b      	adds	r3, #27
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0d5b      	lsrs	r3, r3, #21
 80011a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e00b      	b.n	80011ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	331b      	adds	r3, #27
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	331b      	adds	r3, #27
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0202 	and.w	r2, r3, #2
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	331b      	adds	r3, #27
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	3304      	adds	r3, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 020f 	and.w	r2, r3, #15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	331b      	adds	r3, #27
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	3304      	adds	r3, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	b2da      	uxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	331b      	adds	r3, #27
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0a1a      	lsrs	r2, r3, #8
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0c1a      	lsrs	r2, r3, #16
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3302      	adds	r3, #2
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	0e1a      	lsrs	r2, r3, #24
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3303      	adds	r3, #3
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3304      	adds	r3, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0a1a      	lsrs	r2, r3, #8
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	3305      	adds	r3, #5
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0c1a      	lsrs	r2, r3, #16
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	3306      	adds	r3, #6
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0e1a      	lsrs	r2, r3, #24
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3307      	adds	r3, #7
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	e007      	b.n	800131a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0220 	orr.w	r2, r2, #32
 8001318:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e006      	b.n	800132c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
  }
}
 800132c:	4618      	mov	r0, r3
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001348:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d002      	beq.n	8001356 <HAL_CAN_ActivateNotification+0x1e>
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d109      	bne.n	800136a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6959      	ldr	r1, [r3, #20]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e006      	b.n	8001378 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
  }
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d07c      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d023      	beq.n	800141c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f983 	bl	80016f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80013ec:	e016      	b.n	800141c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	e00c      	b.n	800141c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	e002      	b.n	800141c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f989 	bl	800172e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d024      	beq.n	8001470 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f963 	bl	8001706 <HAL_CAN_TxMailbox1CompleteCallback>
 8001440:	e016      	b.n	8001470 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	e00c      	b.n	8001470 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
 8001468:	e002      	b.n	8001470 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f969 	bl	8001742 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d024      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f943 	bl	800171a <HAL_CAN_TxMailbox2CompleteCallback>
 8001494:	e016      	b.n	80014c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	e00c      	b.n	80014c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	e002      	b.n	80014c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f949 	bl	8001756 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2210      	movs	r2, #16
 80014e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2208      	movs	r2, #8
 8001502:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f930 	bl	800176a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff f8c6 	bl	80006b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00c      	beq.n	800154c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2210      	movs	r2, #16
 800154a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2208      	movs	r2, #8
 8001566:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f912 	bl	8001792 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8f9 	bl	800177e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2210      	movs	r2, #16
 80015a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f8fc 	bl	80017a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2208      	movs	r2, #8
 80015c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f8f5 	bl	80017ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d07b      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d072      	beq.n	80016ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d008      	beq.n	8001600 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163e:	2b00      	cmp	r3, #0
 8001640:	d043      	beq.n	80016ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001648:	2b00      	cmp	r3, #0
 800164a:	d03e      	beq.n	80016ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001652:	2b60      	cmp	r3, #96	; 0x60
 8001654:	d02b      	beq.n	80016ae <HAL_CAN_IRQHandler+0x32a>
 8001656:	2b60      	cmp	r3, #96	; 0x60
 8001658:	d82e      	bhi.n	80016b8 <HAL_CAN_IRQHandler+0x334>
 800165a:	2b50      	cmp	r3, #80	; 0x50
 800165c:	d022      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x320>
 800165e:	2b50      	cmp	r3, #80	; 0x50
 8001660:	d82a      	bhi.n	80016b8 <HAL_CAN_IRQHandler+0x334>
 8001662:	2b40      	cmp	r3, #64	; 0x40
 8001664:	d019      	beq.n	800169a <HAL_CAN_IRQHandler+0x316>
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d826      	bhi.n	80016b8 <HAL_CAN_IRQHandler+0x334>
 800166a:	2b30      	cmp	r3, #48	; 0x30
 800166c:	d010      	beq.n	8001690 <HAL_CAN_IRQHandler+0x30c>
 800166e:	2b30      	cmp	r3, #48	; 0x30
 8001670:	d822      	bhi.n	80016b8 <HAL_CAN_IRQHandler+0x334>
 8001672:	2b10      	cmp	r3, #16
 8001674:	d002      	beq.n	800167c <HAL_CAN_IRQHandler+0x2f8>
 8001676:	2b20      	cmp	r3, #32
 8001678:	d005      	beq.n	8001686 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800167a:	e01d      	b.n	80016b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001684:	e019      	b.n	80016ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800168e:	e014      	b.n	80016ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	f043 0320 	orr.w	r3, r3, #32
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001698:	e00f      	b.n	80016ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a2:	e00a      	b.n	80016ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ac:	e005      	b.n	80016ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b6:	e000      	b.n	80016ba <HAL_CAN_IRQHandler+0x336>
            break;
 80016b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2204      	movs	r2, #4
 80016d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f872 	bl	80017ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	; (8001880 <__NVIC_EnableIRQ+0x38>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff29 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff3e 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff31 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffa2 	bl	8001940 <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e160      	b.n	8001cda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8152 	beq.w	8001cd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d005      	beq.n	8001a48 <HAL_GPIO_Init+0x40>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d130      	bne.n	8001aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7e:	2201      	movs	r2, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 0201 	and.w	r2, r3, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d017      	beq.n	8001ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d123      	bne.n	8001b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	6939      	ldr	r1, [r7, #16]
 8001b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0203 	and.w	r2, r3, #3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80ac 	beq.w	8001cd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7c:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b94:	4a59      	ldr	r2, [pc, #356]	; (8001cfc <HAL_GPIO_Init+0x2f4>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bbe:	d025      	beq.n	8001c0c <HAL_GPIO_Init+0x204>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_GPIO_Init+0x2f8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d01f      	beq.n	8001c08 <HAL_GPIO_Init+0x200>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_GPIO_Init+0x2fc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d019      	beq.n	8001c04 <HAL_GPIO_Init+0x1fc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a4d      	ldr	r2, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x300>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d013      	beq.n	8001c00 <HAL_GPIO_Init+0x1f8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a4c      	ldr	r2, [pc, #304]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00d      	beq.n	8001bfc <HAL_GPIO_Init+0x1f4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x308>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <HAL_GPIO_Init+0x1f0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_GPIO_Init+0x30c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_GPIO_Init+0x1ec>
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	e00c      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	e00a      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	e008      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001c00:	2303      	movs	r3, #3
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_Init+0x206>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1e:	4937      	ldr	r1, [pc, #220]	; (8001cfc <HAL_GPIO_Init+0x2f4>)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c50:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c7a:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_GPIO_Init+0x310>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f47f ae97 	bne.w	8001a18 <HAL_GPIO_Init+0x10>
  }
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	48000400 	.word	0x48000400
 8001d04:	48000800 	.word	0x48000800
 8001d08:	48000c00 	.word	0x48000c00
 8001d0c:	48001000 	.word	0x48001000
 8001d10:	48001400 	.word	0x48001400
 8001d14:	48001800 	.word	0x48001800
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e081      	b.n	8001e62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fd4c 	bl	8000810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	e006      	b.n	8001dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d104      	bne.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69d9      	ldr	r1, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b088      	sub	sp, #32
 8001e6e:	af02      	add	r7, sp, #8
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	f040 80eb 	bne.w	800205e <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_I2C_Slave_Receive+0x2a>
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0df      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Slave_Receive+0x44>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e0d8      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fe19 	bl	8000aec <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2222      	movs	r2, #34	; 0x22
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef2:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	2108      	movs	r1, #8
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f8d6 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f18:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0a0      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2208      	movs	r2, #8
 8001f24:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f8bc 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d048      	beq.n	8001fd0 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e086      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f926 	bl	80021a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d023      	beq.n	8001faa <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f70:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d112      	bne.n	8001fa6 <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e05a      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1bb      	bne.n	8001f52 <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	6839      	ldr	r1, [r7, #0]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f8a6 	bl	8002130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e030      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2220      	movs	r2, #32
 8002004:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f84c 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002040:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 800205e:	2302      	movs	r3, #2
  }
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d007      	beq.n	80020a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	619a      	str	r2, [r3, #24]
  }
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	e022      	b.n	8002108 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d01e      	beq.n	8002108 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7fe fd0f 	bl	8000aec <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d113      	bne.n	8002108 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e00f      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4013      	ands	r3, r2
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	429a      	cmp	r2, r3
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	429a      	cmp	r2, r3
 8002124:	d0cd      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800213c:	e028      	b.n	8002190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f89c 	bl	8002280 <I2C_IsAcknowledgeFailed>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e026      	b.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7fe fccb 	bl	8000aec <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d1cf      	bne.n	800213e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b4:	e055      	b.n	8002262 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f860 	bl	8002280 <I2C_IsAcknowledgeFailed>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e053      	b.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d129      	bne.n	800222c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d105      	bne.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e03f      	b.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2220      	movs	r2, #32
 80021f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002206:	400b      	ands	r3, r1
 8002208:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e022      	b.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe fc5e 	bl	8000aec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10f      	bne.n	8002262 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0220 	orr.w	r2, r3, #32
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e007      	b.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d1a2      	bne.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b10      	cmp	r3, #16
 8002298:	d161      	bne.n	800235e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022a8:	d02b      	beq.n	8002302 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022b8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ba:	e022      	b.n	8002302 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c2:	d01e      	beq.n	8002302 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7fe fc12 	bl	8000aec <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d302      	bcc.n	80022da <I2C_IsAcknowledgeFailed+0x5a>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d113      	bne.n	8002302 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e02e      	b.n	8002360 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b20      	cmp	r3, #32
 800230e:	d1d5      	bne.n	80022bc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2210      	movs	r2, #16
 8002316:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2220      	movs	r2, #32
 800231e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff fea1 	bl	8002068 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <I2C_IsAcknowledgeFailed+0xe8>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f043 0204 	orr.w	r2, r3, #4
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	fe00e800 	.word	0xfe00e800

0800236c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	d138      	bne.n	80023f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800238c:	2302      	movs	r3, #2
 800238e:	e032      	b.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	; 0x24
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	d139      	bne.n	800248c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002422:	2302      	movs	r3, #2
 8002424:	e033      	b.n	800248e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2224      	movs	r2, #36	; 0x24
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002454:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	e000      	b.n	800248e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800248c:	2302      	movs	r3, #2
  }
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	f001 b83a 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 816f 	beq.w	80027b6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024d8:	4bb5      	ldr	r3, [pc, #724]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d00c      	beq.n	80024fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e4:	4bb2      	ldr	r3, [pc, #712]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d15c      	bne.n	80025aa <HAL_RCC_OscConfig+0x10e>
 80024f0:	4baf      	ldr	r3, [pc, #700]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d155      	bne.n	80025aa <HAL_RCC_OscConfig+0x10e>
 80024fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002502:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002512:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0x94>
 800252a:	4ba1      	ldr	r3, [pc, #644]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e015      	b.n	800255c <HAL_RCC_OscConfig+0xc0>
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800254c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002558:	4b95      	ldr	r3, [pc, #596]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002560:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002564:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002570:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f042 0220 	orr.w	r2, r2, #32
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f002 021f 	and.w	r2, r2, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8111 	beq.w	80027b4 <HAL_RCC_OscConfig+0x318>
 8002592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002596:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 8108 	bne.w	80027b4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f000 bfc6 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x12e>
 80025bc:	4b7c      	ldr	r3, [pc, #496]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7b      	ldr	r2, [pc, #492]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e036      	b.n	8002638 <HAL_RCC_OscConfig+0x19c>
 80025ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x158>
 80025da:	4b75      	ldr	r3, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a74      	ldr	r2, [pc, #464]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a71      	ldr	r2, [pc, #452]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80025ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e021      	b.n	8002638 <HAL_RCC_OscConfig+0x19c>
 80025f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x184>
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a69      	ldr	r2, [pc, #420]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a66      	ldr	r2, [pc, #408]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x19c>
 8002620:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a62      	ldr	r2, [pc, #392]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5f      	ldr	r2, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d059      	beq.n	80026fc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fa50 	bl	8000aec <HAL_GetTick>
 800264c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002652:	f7fe fa4b 	bl	8000aec <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d902      	bls.n	8002668 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	f000 bf67 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
 8002668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800267c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_RCC_OscConfig+0x1fe>
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x22a>
 800269a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80026ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80026ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80026d2:	fa92 f2a2 	rbit	r2, r2
 80026d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80026da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80026de:	fab2 f282 	clz	r2, r2
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f002 021f 	and.w	r2, r2, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ab      	beq.n	8002652 <HAL_RCC_OscConfig+0x1b6>
 80026fa:	e05c      	b.n	80027b6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe f9f6 	bl	8000aec <HAL_GetTick>
 8002700:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002706:	f7fe f9f1 	bl	8000aec <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d902      	bls.n	800271c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	f000 bf0d 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
 800271c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002720:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002730:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <HAL_RCC_OscConfig+0x2b2>
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x2de>
 800274e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002752:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002766:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800276a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_RCC_OscConfig+0x314>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800277e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002782:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002786:	fa92 f2a2 	rbit	r2, r2
 800278a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800278e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ab      	bne.n	8002706 <HAL_RCC_OscConfig+0x26a>
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_OscConfig+0x31a>
 80027b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 817f 	beq.w	8002aca <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027cc:	4ba7      	ldr	r3, [pc, #668]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027d8:	4ba4      	ldr	r3, [pc, #656]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d173      	bne.n	80028cc <HAL_RCC_OscConfig+0x430>
 80027e4:	4ba1      	ldr	r3, [pc, #644]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80027ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f0:	d16c      	bne.n	80028cc <HAL_RCC_OscConfig+0x430>
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002804:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d102      	bne.n	8002822 <HAL_RCC_OscConfig+0x386>
 800281c:	4b93      	ldr	r3, [pc, #588]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	e013      	b.n	800284a <HAL_RCC_OscConfig+0x3ae>
 8002822:	2302      	movs	r3, #2
 8002824:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800283a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002846:	4b89      	ldr	r3, [pc, #548]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2202      	movs	r2, #2
 800284c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002850:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002854:	fa92 f2a2 	rbit	r2, r2
 8002858:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800285c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	f042 0220 	orr.w	r2, r2, #32
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	f002 021f 	and.w	r2, r2, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f202 	lsl.w	r2, r1, r2
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCC_OscConfig+0x3f6>
 800287c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002880:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d002      	beq.n	8002892 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f000 be52 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	21f8      	movs	r1, #248	; 0xf8
 80028a8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80028b0:	fa91 f1a1 	rbit	r1, r1
 80028b4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80028b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80028bc:	fab1 f181 	clz	r1, r1
 80028c0:	b2c9      	uxtb	r1, r1
 80028c2:	408b      	lsls	r3, r1
 80028c4:	4969      	ldr	r1, [pc, #420]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e0fe      	b.n	8002aca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8088 	beq.w	80029ee <HAL_RCC_OscConfig+0x552>
 80028de:	2301      	movs	r3, #1
 80028e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80028f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	461a      	mov	r2, r3
 8002906:	2301      	movs	r3, #1
 8002908:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe f8ef 	bl	8000aec <HAL_GetTick>
 800290e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7fe f8ea 	bl	8000aec <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d902      	bls.n	800292a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	f000 be06 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800293c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d102      	bne.n	800295a <HAL_RCC_OscConfig+0x4be>
 8002954:	4b45      	ldr	r3, [pc, #276]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e013      	b.n	8002982 <HAL_RCC_OscConfig+0x4e6>
 800295a:	2302      	movs	r3, #2
 800295c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002972:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2202      	movs	r2, #2
 8002984:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002988:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800298c:	fa92 f2a2 	rbit	r2, r2
 8002990:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002994:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0af      	beq.n	8002914 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	21f8      	movs	r1, #248	; 0xf8
 80029ca:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80029d2:	fa91 f1a1 	rbit	r1, r1
 80029d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80029da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029de:	fab1 f181 	clz	r1, r1
 80029e2:	b2c9      	uxtb	r1, r1
 80029e4:	408b      	lsls	r3, r1
 80029e6:	4921      	ldr	r1, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e06d      	b.n	8002aca <HAL_RCC_OscConfig+0x62e>
 80029ee:	2301      	movs	r3, #1
 80029f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002a00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	461a      	mov	r2, r3
 8002a16:	2300      	movs	r3, #0
 8002a18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f867 	bl	8000aec <HAL_GetTick>
 8002a1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe f862 	bl	8000aec <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d902      	bls.n	8002a3a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	f000 bd7e 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5d4>
 8002a64:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <HAL_RCC_OscConfig+0x5d0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	e016      	b.n	8002a98 <HAL_RCC_OscConfig+0x5fc>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	2302      	movs	r3, #2
 8002a72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a82:	2302      	movs	r3, #2
 8002a84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a94:	4bbf      	ldr	r3, [pc, #764]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a9e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002aa2:	fa92 f2a2 	rbit	r2, r2
 8002aa6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002aaa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ac      	bne.n	8002a24 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8113 	beq.w	8002d06 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d07c      	beq.n	8002bea <HAL_RCC_OscConfig+0x74e>
 8002af0:	2301      	movs	r3, #1
 8002af2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002b02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4ba2      	ldr	r3, [pc, #648]	; (8002d98 <HAL_RCC_OscConfig+0x8fc>)
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	461a      	mov	r2, r3
 8002b16:	2301      	movs	r3, #1
 8002b18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fd ffe7 	bl	8000aec <HAL_GetTick>
 8002b1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fd ffe2 	bl	8000aec <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d902      	bls.n	8002b3a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	f000 bcfe 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b7e:	2202      	movs	r2, #2
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	6019      	str	r1, [r3, #0]
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f1a3 	rbit	r1, r3
 8002bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bc0:	6019      	str	r1, [r3, #0]
  return result;
 8002bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d09d      	beq.n	8002b24 <HAL_RCC_OscConfig+0x688>
 8002be8:	e08d      	b.n	8002d06 <HAL_RCC_OscConfig+0x86a>
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f2a3 	rbit	r2, r3
 8002c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c0c:	601a      	str	r2, [r3, #0]
  return result;
 8002c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b5d      	ldr	r3, [pc, #372]	; (8002d98 <HAL_RCC_OscConfig+0x8fc>)
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	461a      	mov	r2, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fd ff5e 	bl	8000aec <HAL_GetTick>
 8002c30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fd ff59 	bl	8000aec <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d902      	bls.n	8002c4c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	f000 bc75 	b.w	8003536 <HAL_RCC_OscConfig+0x109a>
 8002c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c54:	2202      	movs	r2, #2
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c78:	2202      	movs	r2, #2
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002cb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	6019      	str	r1, [r3, #0]
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f1a3 	rbit	r1, r3
 8002cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cda:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cde:	6019      	str	r1, [r3, #0]
  return result;
 8002ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d197      	bne.n	8002c36 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 81a5 	beq.w	8003066 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	61d3      	str	r3, [r2, #28]
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_RCC_OscConfig+0x8f8>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCC_OscConfig+0x900>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d121      	bne.n	8002dac <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCC_OscConfig+0x900>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x900>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d74:	f7fd feba 	bl	8000aec <HAL_GetTick>
 8002d78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	e010      	b.n	8002da0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7fd feb5 	bl	8000aec <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e3d1      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	10908120 	.word	0x10908120
 8002d9c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b8d      	ldr	r3, [pc, #564]	; (8002fd8 <HAL_RCC_OscConfig+0xb3c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0e8      	beq.n	8002d7e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x92e>
 8002dbc:	4b87      	ldr	r3, [pc, #540]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a86      	ldr	r2, [pc, #536]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e035      	b.n	8002e36 <HAL_RCC_OscConfig+0x99a>
 8002dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x958>
 8002dda:	4b80      	ldr	r3, [pc, #512]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a7f      	ldr	r2, [pc, #508]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b7d      	ldr	r3, [pc, #500]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a7c      	ldr	r2, [pc, #496]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	e020      	b.n	8002e36 <HAL_RCC_OscConfig+0x99a>
 8002df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x982>
 8002e04:	4b75      	ldr	r3, [pc, #468]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a74      	ldr	r2, [pc, #464]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a71      	ldr	r2, [pc, #452]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x99a>
 8002e1e:	4b6f      	ldr	r3, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b6c      	ldr	r3, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a6b      	ldr	r2, [pc, #428]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8081 	beq.w	8002f4a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7fd fe50 	bl	8000aec <HAL_GetTick>
 8002e4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fd fe4b 	bl	8000aec <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e365      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
 8002e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002eb0:	601a      	str	r2, [r3, #0]
  return result;
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002eba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0xa3a>
 8002ed0:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	e013      	b.n	8002efe <HAL_RCC_OscConfig+0xa62>
 8002ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ede:	2202      	movs	r2, #2
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f06:	2102      	movs	r1, #2
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fa92 f1a2 	rbit	r1, r2
 8002f18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f1c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002f20:	6011      	str	r1, [r2, #0]
  return result;
 8002f22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f26:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d084      	beq.n	8002e52 <HAL_RCC_OscConfig+0x9b6>
 8002f48:	e083      	b.n	8003052 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fdcf 	bl	8000aec <HAL_GetTick>
 8002f4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fd fdca 	bl	8000aec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e2e4      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
 8002f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002fbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d106      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xb44>
 8002fd2:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_RCC_OscConfig+0xb40>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	e017      	b.n	8003008 <HAL_RCC_OscConfig+0xb6c>
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002fe8:	2202      	movs	r2, #2
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4bb3      	ldr	r3, [pc, #716]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800300c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003010:	2102      	movs	r1, #2
 8003012:	6011      	str	r1, [r2, #0]
 8003014:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003018:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	fa92 f1a2 	rbit	r1, r2
 8003022:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003026:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800302a:	6011      	str	r1, [r2, #0]
  return result;
 800302c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003030:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	fab2 f282 	clz	r2, r2
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f002 021f 	and.w	r2, r2, #31
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d180      	bne.n	8002f54 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003052:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003056:	2b01      	cmp	r3, #1
 8003058:	d105      	bne.n	8003066 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305a:	4b9e      	ldr	r3, [pc, #632]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a9d      	ldr	r2, [pc, #628]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 825e 	beq.w	8003534 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003078:	4b96      	ldr	r3, [pc, #600]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	f000 821f 	beq.w	80034c4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b02      	cmp	r3, #2
 8003094:	f040 8170 	bne.w	8003378 <HAL_RCC_OscConfig+0xedc>
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030bc:	601a      	str	r2, [r3, #0]
  return result;
 80030be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	461a      	mov	r2, r3
 80030da:	2300      	movs	r3, #0
 80030dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fd fd05 	bl	8000aec <HAL_GetTick>
 80030e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fd00 	bl	8000aec <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e21c      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
 80030fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003100:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003120:	601a      	str	r2, [r3, #0]
  return result;
 8003122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003126:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800312a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_RCC_OscConfig+0xcaa>
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e027      	b.n	8003196 <HAL_RCC_OscConfig+0xcfa>
 8003146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800314e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003158:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003170:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800319a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800319e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a2:	6011      	str	r1, [r2, #0]
 80031a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	fa92 f1a2 	rbit	r1, r2
 80031b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031b6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80031ba:	6011      	str	r1, [r2, #0]
  return result;
 80031bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031c0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	fab2 f282 	clz	r2, r2
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f002 021f 	and.w	r2, r2, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d182      	bne.n	80030e8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e2:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	f023 020f 	bic.w	r2, r3, #15
 80031ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	4937      	ldr	r1, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80031fc:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a19      	ldr	r1, [r3, #32]
 8003210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	430b      	orrs	r3, r1
 800321e:	492d      	ldr	r1, [pc, #180]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003228:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800322c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003236:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003244:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003248:	601a      	str	r2, [r3, #0]
  return result;
 800324a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003252:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800325e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	461a      	mov	r2, r3
 8003266:	2301      	movs	r3, #1
 8003268:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fd fc3f 	bl	8000aec <HAL_GetTick>
 800326e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003272:	e009      	b.n	8003288 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fd fc3a 	bl	8000aec <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e156      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
 8003288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032ac:	601a      	str	r2, [r3, #0]
  return result;
 80032ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0xe3c>
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <HAL_RCC_OscConfig+0xe38>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	e02a      	b.n	8003328 <HAL_RCC_OscConfig+0xe8c>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80032e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003302:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003310:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	4b86      	ldr	r3, [pc, #536]	; (8003540 <HAL_RCC_OscConfig+0x10a4>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800332c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003330:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800333a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fa92 f1a2 	rbit	r1, r2
 8003344:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003348:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800334c:	6011      	str	r1, [r2, #0]
  return result;
 800334e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003352:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f002 021f 	and.w	r2, r2, #31
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	f43f af7f 	beq.w	8003274 <HAL_RCC_OscConfig+0xdd8>
 8003376:	e0dd      	b.n	8003534 <HAL_RCC_OscConfig+0x1098>
 8003378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003398:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800339c:	601a      	str	r2, [r3, #0]
  return result;
 800339e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80033a6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	461a      	mov	r2, r3
 80033ba:	2300      	movs	r3, #0
 80033bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fb95 	bl	8000aec <HAL_GetTick>
 80033c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c6:	e009      	b.n	80033dc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fb90 	bl	8000aec <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0ac      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80033e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003400:	601a      	str	r2, [r3, #0]
  return result;
 8003402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003406:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800340a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0xf8a>
 8003420:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_OscConfig+0x10a4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e027      	b.n	8003476 <HAL_RCC_OscConfig+0xfda>
 8003426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800342e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003438:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003446:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003450:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_RCC_OscConfig+0x10a4>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800347a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800347e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003482:	6011      	str	r1, [r2, #0]
 8003484:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003488:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fa92 f1a2 	rbit	r1, r2
 8003492:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003496:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800349a:	6011      	str	r1, [r2, #0]
  return result;
 800349c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034a0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d182      	bne.n	80033c8 <HAL_RCC_OscConfig+0xf2c>
 80034c2:	e037      	b.n	8003534 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02e      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_OscConfig+0x10a4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_RCC_OscConfig+0x10a4>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80034ec:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80034f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d117      	bne.n	8003530 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003500:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003504:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003514:	429a      	cmp	r2, r3
 8003516:	d10b      	bne.n	8003530 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b09e      	sub	sp, #120	; 0x78
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e162      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b90      	ldr	r3, [pc, #576]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b8d      	ldr	r3, [pc, #564]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 0207 	bic.w	r2, r3, #7
 8003572:	498b      	ldr	r1, [pc, #556]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b89      	ldr	r3, [pc, #548]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e14a      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	497f      	ldr	r1, [pc, #508]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80dc 	beq.w	8003770 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d13c      	bne.n	800363a <HAL_RCC_ClockConfig+0xf6>
 80035c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d102      	bne.n	80035ea <HAL_RCC_ClockConfig+0xa6>
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	e00f      	b.n	800360a <HAL_RCC_ClockConfig+0xc6>
 80035ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	667b      	str	r3, [r7, #100]	; 0x64
 80035f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fc:	663b      	str	r3, [r7, #96]	; 0x60
 80035fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800360e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003612:	fa92 f2a2 	rbit	r2, r2
 8003616:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800361a:	fab2 f282 	clz	r2, r2
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	f042 0220 	orr.w	r2, r2, #32
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	f002 021f 	and.w	r2, r2, #31
 800362a:	2101      	movs	r1, #1
 800362c:	fa01 f202 	lsl.w	r2, r1, r2
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d17b      	bne.n	800372e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0f3      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d13c      	bne.n	80036bc <HAL_RCC_ClockConfig+0x178>
 8003642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003646:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d102      	bne.n	800366c <HAL_RCC_ClockConfig+0x128>
 8003666:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	e00f      	b.n	800368c <HAL_RCC_ClockConfig+0x148>
 800366c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
 800367a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367e:	643b      	str	r3, [r7, #64]	; 0x40
 8003680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003690:	63ba      	str	r2, [r7, #56]	; 0x38
 8003692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800369a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f002 021f 	and.w	r2, r2, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13a      	bne.n	800372e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b2      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
 80036bc:	2302      	movs	r3, #2
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d102      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x1a0>
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	e00d      	b.n	8003700 <HAL_RCC_ClockConfig+0x1bc>
 80036e4:	2302      	movs	r3, #2
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
 80036f0:	2302      	movs	r3, #2
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2202      	movs	r2, #2
 8003702:	61ba      	str	r2, [r7, #24]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	fa92 f2a2 	rbit	r2, r2
 800370a:	617a      	str	r2, [r7, #20]
  return result;
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	fab2 f282 	clz	r2, r2
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f002 021f 	and.w	r2, r2, #31
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e079      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	491a      	ldr	r1, [pc, #104]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fd f9d4 	bl	8000aec <HAL_GetTick>
 8003744:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fd f9d0 	bl	8000aec <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e061      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d214      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 0207 	bic.w	r2, r3, #7
 8003786:	4906      	ldr	r1, [pc, #24]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e040      	b.n	8003822 <HAL_RCC_ClockConfig+0x2de>
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCC_ClockConfig+0x2e8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	491a      	ldr	r1, [pc, #104]	; (800382c <HAL_RCC_ClockConfig+0x2e8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_RCC_ClockConfig+0x2e8>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4912      	ldr	r1, [pc, #72]	; (800382c <HAL_RCC_ClockConfig+0x2e8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037e6:	f000 f829 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_RCC_ClockConfig+0x2e8>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f4:	22f0      	movs	r2, #240	; 0xf0
 80037f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	40d3      	lsrs	r3, r2
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x2ec>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	fa21 f303 	lsr.w	r3, r1, r3
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <HAL_RCC_ClockConfig+0x2f0>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_RCC_ClockConfig+0x2f4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd f922 	bl	8000a64 <HAL_InitTick>
  
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3778      	adds	r7, #120	; 0x78
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	08004764 	.word	0x08004764
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b08b      	sub	sp, #44	; 0x2c
 8003840:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b04      	cmp	r3, #4
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x30>
 8003866:	2b08      	cmp	r3, #8
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x36>
 800386a:	e03f      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc8>)
 800386e:	623b      	str	r3, [r7, #32]
      break;
 8003870:	e03f      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003878:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800387c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	fa92 f2a2 	rbit	r2, r2
 8003884:	607a      	str	r2, [r7, #4]
  return result;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	40d3      	lsrs	r3, r2
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	220f      	movs	r2, #15
 80038a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	fa92 f2a2 	rbit	r2, r2
 80038a8:	60fa      	str	r2, [r7, #12]
  return result;
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	fab2 f282 	clz	r2, r2
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	40d3      	lsrs	r3, r2
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_RCC_GetSysClockFreq+0xd0>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	e007      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fbb2 f2f3 	udiv	r2, r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	623b      	str	r3, [r7, #32]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038ee:	623b      	str	r3, [r7, #32]
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	372c      	adds	r7, #44	; 0x2c
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40021000 	.word	0x40021000
 8003904:	007a1200 	.word	0x007a1200
 8003908:	0800477c 	.word	0x0800477c
 800390c:	0800478c 	.word	0x0800478c

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_RCC_GetHCLKFreq+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000

08003928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800392e:	f7ff ffef 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003932:	4601      	mov	r1, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800393c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003940:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	fa92 f2a2 	rbit	r2, r2
 8003948:	603a      	str	r2, [r7, #0]
  return result;
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	40d3      	lsrs	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	08004774 	.word	0x08004774

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003972:	f7ff ffcd 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003976:	4601      	mov	r1, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003980:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003984:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	fa92 f2a2 	rbit	r2, r2
 800398c:	603a      	str	r2, [r7, #0]
  return result;
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	40d3      	lsrs	r3, r2
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08004774 	.word	0x08004774

080039b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b092      	sub	sp, #72	; 0x48
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80d4 	beq.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d4:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10e      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4a4a      	ldr	r2, [pc, #296]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	61d3      	str	r3, [r2, #28]
 80039ec:	4b48      	ldr	r3, [pc, #288]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4b42      	ldr	r3, [pc, #264]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a41      	ldr	r2, [pc, #260]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd f869 	bl	8000aec <HAL_GetTick>
 8003a1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd f865 	bl	8000aec <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b64      	cmp	r3, #100	; 0x64
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e1d6      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3c:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8084 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d07c      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5c:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	461a      	mov	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aae:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d04b      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fd f815 	bl	8000aec <HAL_GetTick>
 8003ac2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd f811 	bl	8000aec <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e180      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003adc:	2302      	movs	r3, #2
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	2302      	movs	r3, #2
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	61fb      	str	r3, [r7, #28]
  return result;
 8003af4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d108      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b0a:	4b01      	ldr	r3, [pc, #4]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	e00d      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40007000 	.word	0x40007000
 8003b18:	10908100 	.word	0x10908100
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	4b9a      	ldr	r3, [pc, #616]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	613a      	str	r2, [r7, #16]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	fa92 f2a2 	rbit	r2, r2
 8003b36:	60fa      	str	r2, [r7, #12]
  return result;
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	fab2 f282 	clz	r2, r2
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f002 021f 	and.w	r2, r2, #31
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0b7      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b56:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	498c      	ldr	r1, [pc, #560]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b70:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4a87      	ldr	r2, [pc, #540]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b88:	4b82      	ldr	r3, [pc, #520]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f023 0203 	bic.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	497f      	ldr	r1, [pc, #508]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4978      	ldr	r1, [pc, #480]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bc4:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4970      	ldr	r1, [pc, #448]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be2:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f023 0210 	bic.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4969      	ldr	r1, [pc, #420]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c00:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	4961      	ldr	r1, [pc, #388]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1e:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f023 0220 	bic.w	r2, r3, #32
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	495a      	ldr	r1, [pc, #360]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	4952      	ldr	r1, [pc, #328]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c5a:	4b4e      	ldr	r3, [pc, #312]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	494b      	ldr	r1, [pc, #300]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c78:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	4943      	ldr	r1, [pc, #268]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c96:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	493c      	ldr	r1, [pc, #240]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cb4:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	492d      	ldr	r1, [pc, #180]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	4925      	ldr	r1, [pc, #148]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	491e      	ldr	r1, [pc, #120]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	4916      	ldr	r1, [pc, #88]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	490f      	ldr	r1, [pc, #60]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	4907      	ldr	r1, [pc, #28]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d86:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	e002      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9a:	4913      	ldr	r1, [pc, #76]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	490b      	ldr	r1, [pc, #44]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	4904      	ldr	r1, [pc, #16]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3748      	adds	r7, #72	; 0x48
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e040      	b.n	8003e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fd60 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	; 0x24
 8003e18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8c0 	bl	8003fb0 <UART_SetConfig>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e022      	b.n	8003e80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa8a 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fb11 	bl	80044a0 <UART_CheckIdleState>
 8003e7e:	4603      	mov	r3, r0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	f040 8082 	bne.w	8003fa6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_UART_Transmit+0x26>
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07a      	b.n	8003fa8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Transmit+0x38>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e073      	b.n	8003fa8 <HAL_UART_Transmit+0x120>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2221      	movs	r2, #33	; 0x21
 8003ed4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed6:	f7fc fe09 	bl	8000aec <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d108      	bne.n	8003f08 <HAL_UART_Transmit+0x80>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	e003      	b.n	8003f10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f18:	e02d      	b.n	8003f76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fb04 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e039      	b.n	8003fa8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f46:	b292      	uxth	r2, r2
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e008      	b.n	8003f64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1cb      	bne.n	8003f1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2140      	movs	r1, #64	; 0x40
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fad0 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e005      	b.n	8003fa8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b92      	ldr	r3, [pc, #584]	; (8004224 <UART_SetConfig+0x274>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	6979      	ldr	r1, [r7, #20]
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a80      	ldr	r2, [pc, #512]	; (8004228 <UART_SetConfig+0x278>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d120      	bne.n	800406e <UART_SetConfig+0xbe>
 800402c:	4b7f      	ldr	r3, [pc, #508]	; (800422c <UART_SetConfig+0x27c>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b03      	cmp	r3, #3
 8004036:	d817      	bhi.n	8004068 <UART_SetConfig+0xb8>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0x90>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	0800405d 	.word	0x0800405d
 8004048:	08004063 	.word	0x08004063
 800404c:	08004057 	.word	0x08004057
 8004050:	2301      	movs	r3, #1
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e0b5      	b.n	80041c2 <UART_SetConfig+0x212>
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e0b2      	b.n	80041c2 <UART_SetConfig+0x212>
 800405c:	2304      	movs	r3, #4
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e0af      	b.n	80041c2 <UART_SetConfig+0x212>
 8004062:	2308      	movs	r3, #8
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e0ac      	b.n	80041c2 <UART_SetConfig+0x212>
 8004068:	2310      	movs	r3, #16
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e0a9      	b.n	80041c2 <UART_SetConfig+0x212>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6f      	ldr	r2, [pc, #444]	; (8004230 <UART_SetConfig+0x280>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d124      	bne.n	80040c2 <UART_SetConfig+0x112>
 8004078:	4b6c      	ldr	r3, [pc, #432]	; (800422c <UART_SetConfig+0x27c>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004084:	d011      	beq.n	80040aa <UART_SetConfig+0xfa>
 8004086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800408a:	d817      	bhi.n	80040bc <UART_SetConfig+0x10c>
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004090:	d011      	beq.n	80040b6 <UART_SetConfig+0x106>
 8004092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004096:	d811      	bhi.n	80040bc <UART_SetConfig+0x10c>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <UART_SetConfig+0xf4>
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d006      	beq.n	80040b0 <UART_SetConfig+0x100>
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x10c>
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e08b      	b.n	80041c2 <UART_SetConfig+0x212>
 80040aa:	2302      	movs	r3, #2
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e088      	b.n	80041c2 <UART_SetConfig+0x212>
 80040b0:	2304      	movs	r3, #4
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e085      	b.n	80041c2 <UART_SetConfig+0x212>
 80040b6:	2308      	movs	r3, #8
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e082      	b.n	80041c2 <UART_SetConfig+0x212>
 80040bc:	2310      	movs	r3, #16
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e07f      	b.n	80041c2 <UART_SetConfig+0x212>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a5b      	ldr	r2, [pc, #364]	; (8004234 <UART_SetConfig+0x284>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d124      	bne.n	8004116 <UART_SetConfig+0x166>
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <UART_SetConfig+0x27c>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040d8:	d011      	beq.n	80040fe <UART_SetConfig+0x14e>
 80040da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040de:	d817      	bhi.n	8004110 <UART_SetConfig+0x160>
 80040e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040e4:	d011      	beq.n	800410a <UART_SetConfig+0x15a>
 80040e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040ea:	d811      	bhi.n	8004110 <UART_SetConfig+0x160>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <UART_SetConfig+0x148>
 80040f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040f4:	d006      	beq.n	8004104 <UART_SetConfig+0x154>
 80040f6:	e00b      	b.n	8004110 <UART_SetConfig+0x160>
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e061      	b.n	80041c2 <UART_SetConfig+0x212>
 80040fe:	2302      	movs	r3, #2
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e05e      	b.n	80041c2 <UART_SetConfig+0x212>
 8004104:	2304      	movs	r3, #4
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e05b      	b.n	80041c2 <UART_SetConfig+0x212>
 800410a:	2308      	movs	r3, #8
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e058      	b.n	80041c2 <UART_SetConfig+0x212>
 8004110:	2310      	movs	r3, #16
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e055      	b.n	80041c2 <UART_SetConfig+0x212>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a47      	ldr	r2, [pc, #284]	; (8004238 <UART_SetConfig+0x288>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d124      	bne.n	800416a <UART_SetConfig+0x1ba>
 8004120:	4b42      	ldr	r3, [pc, #264]	; (800422c <UART_SetConfig+0x27c>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800412c:	d011      	beq.n	8004152 <UART_SetConfig+0x1a2>
 800412e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004132:	d817      	bhi.n	8004164 <UART_SetConfig+0x1b4>
 8004134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004138:	d011      	beq.n	800415e <UART_SetConfig+0x1ae>
 800413a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413e:	d811      	bhi.n	8004164 <UART_SetConfig+0x1b4>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <UART_SetConfig+0x19c>
 8004144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004148:	d006      	beq.n	8004158 <UART_SetConfig+0x1a8>
 800414a:	e00b      	b.n	8004164 <UART_SetConfig+0x1b4>
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e037      	b.n	80041c2 <UART_SetConfig+0x212>
 8004152:	2302      	movs	r3, #2
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e034      	b.n	80041c2 <UART_SetConfig+0x212>
 8004158:	2304      	movs	r3, #4
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e031      	b.n	80041c2 <UART_SetConfig+0x212>
 800415e:	2308      	movs	r3, #8
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e02e      	b.n	80041c2 <UART_SetConfig+0x212>
 8004164:	2310      	movs	r3, #16
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e02b      	b.n	80041c2 <UART_SetConfig+0x212>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a33      	ldr	r2, [pc, #204]	; (800423c <UART_SetConfig+0x28c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d124      	bne.n	80041be <UART_SetConfig+0x20e>
 8004174:	4b2d      	ldr	r3, [pc, #180]	; (800422c <UART_SetConfig+0x27c>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800417c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004180:	d011      	beq.n	80041a6 <UART_SetConfig+0x1f6>
 8004182:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004186:	d817      	bhi.n	80041b8 <UART_SetConfig+0x208>
 8004188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800418c:	d011      	beq.n	80041b2 <UART_SetConfig+0x202>
 800418e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004192:	d811      	bhi.n	80041b8 <UART_SetConfig+0x208>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <UART_SetConfig+0x1f0>
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419c:	d006      	beq.n	80041ac <UART_SetConfig+0x1fc>
 800419e:	e00b      	b.n	80041b8 <UART_SetConfig+0x208>
 80041a0:	2300      	movs	r3, #0
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e00d      	b.n	80041c2 <UART_SetConfig+0x212>
 80041a6:	2302      	movs	r3, #2
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e00a      	b.n	80041c2 <UART_SetConfig+0x212>
 80041ac:	2304      	movs	r3, #4
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e007      	b.n	80041c2 <UART_SetConfig+0x212>
 80041b2:	2308      	movs	r3, #8
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e004      	b.n	80041c2 <UART_SetConfig+0x212>
 80041b8:	2310      	movs	r3, #16
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e001      	b.n	80041c2 <UART_SetConfig+0x212>
 80041be:	2310      	movs	r3, #16
 80041c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ca:	d16c      	bne.n	80042a6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d838      	bhi.n	8004244 <UART_SetConfig+0x294>
 80041d2:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x228>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004205 	.word	0x08004205
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	08004245 	.word	0x08004245
 80041e8:	08004213 	.word	0x08004213
 80041ec:	08004245 	.word	0x08004245
 80041f0:	08004245 	.word	0x08004245
 80041f4:	08004245 	.word	0x08004245
 80041f8:	0800421b 	.word	0x0800421b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7ff fb94 	bl	8003928 <HAL_RCC_GetPCLK1Freq>
 8004200:	61b8      	str	r0, [r7, #24]
        break;
 8004202:	e024      	b.n	800424e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7ff fbb2 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 8004208:	61b8      	str	r0, [r7, #24]
        break;
 800420a:	e020      	b.n	800424e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <UART_SetConfig+0x290>)
 800420e:	61bb      	str	r3, [r7, #24]
        break;
 8004210:	e01d      	b.n	800424e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7ff fb13 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8004216:	61b8      	str	r0, [r7, #24]
        break;
 8004218:	e019      	b.n	800424e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	61bb      	str	r3, [r7, #24]
        break;
 8004220:	e015      	b.n	800424e <UART_SetConfig+0x29e>
 8004222:	bf00      	nop
 8004224:	efff69f3 	.word	0xefff69f3
 8004228:	40013800 	.word	0x40013800
 800422c:	40021000 	.word	0x40021000
 8004230:	40004400 	.word	0x40004400
 8004234:	40004800 	.word	0x40004800
 8004238:	40004c00 	.word	0x40004c00
 800423c:	40005000 	.word	0x40005000
 8004240:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	77bb      	strb	r3, [r7, #30]
        break;
 800424c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d075      	beq.n	8004340 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	005a      	lsls	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	441a      	add	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	b29b      	uxth	r3, r3
 800426a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d916      	bls.n	80042a0 <UART_SetConfig+0x2f0>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d212      	bcs.n	80042a0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f023 030f 	bic.w	r3, r3, #15
 8004282:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	b29a      	uxth	r2, r3
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	4313      	orrs	r3, r2
 8004294:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	89fa      	ldrh	r2, [r7, #14]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e04f      	b.n	8004340 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77bb      	strb	r3, [r7, #30]
 80042a4:	e04c      	b.n	8004340 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042a6:	7ffb      	ldrb	r3, [r7, #31]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d828      	bhi.n	80042fe <UART_SetConfig+0x34e>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x304>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ff 	.word	0x080042ff
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7ff fb26 	bl	8003928 <HAL_RCC_GetPCLK1Freq>
 80042dc:	61b8      	str	r0, [r7, #24]
        break;
 80042de:	e013      	b.n	8004308 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff fb44 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e00f      	b.n	8004308 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <UART_SetConfig+0x3a8>)
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e00c      	b.n	8004308 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7ff faa5 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80042f2:	61b8      	str	r0, [r7, #24]
        break;
 80042f4:	e008      	b.n	8004308 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	61bb      	str	r3, [r7, #24]
        break;
 80042fc:	e004      	b.n	8004308 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	77bb      	strb	r3, [r7, #30]
        break;
 8004306:	bf00      	nop
    }

    if (pclk != 0U)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d018      	beq.n	8004340 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	085a      	lsrs	r2, r3, #1
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	b29b      	uxth	r3, r3
 8004322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b0f      	cmp	r3, #15
 8004328:	d908      	bls.n	800433c <UART_SetConfig+0x38c>
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004330:	d204      	bcs.n	800433c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	e001      	b.n	8004340 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800434c:	7fbb      	ldrb	r3, [r7, #30]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	007a1200 	.word	0x007a1200

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fc fb1c 	bl	8000aec <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d10e      	bne.n	80044e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f82d 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e023      	b.n	800452a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d10e      	bne.n	800450e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f817 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e00d      	b.n	800452a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b09c      	sub	sp, #112	; 0x70
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	e0a5      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	f000 80a1 	beq.w	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fc facd 	bl	8000aec <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <UART_WaitOnFlagUntilTimeout+0x32>
 800455e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004560:	2b00      	cmp	r3, #0
 8004562:	d13e      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004578:	667b      	str	r3, [r7, #100]	; 0x64
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004584:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	663b      	str	r3, [r7, #96]	; 0x60
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e067      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04f      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fe:	d147      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800461e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	613b      	str	r3, [r7, #16]
   return(result);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800465c:	623a      	str	r2, [r7, #32]
 800465e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	61bb      	str	r3, [r7, #24]
   return(result);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e5      	bne.n	800463c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e010      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	f43f af4a 	beq.w	8004544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3770      	adds	r7, #112	; 0x70
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <__libc_init_array>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4d0d      	ldr	r5, [pc, #52]	; (80046f4 <__libc_init_array+0x38>)
 80046c0:	4c0d      	ldr	r4, [pc, #52]	; (80046f8 <__libc_init_array+0x3c>)
 80046c2:	1b64      	subs	r4, r4, r5
 80046c4:	10a4      	asrs	r4, r4, #2
 80046c6:	2600      	movs	r6, #0
 80046c8:	42a6      	cmp	r6, r4
 80046ca:	d109      	bne.n	80046e0 <__libc_init_array+0x24>
 80046cc:	4d0b      	ldr	r5, [pc, #44]	; (80046fc <__libc_init_array+0x40>)
 80046ce:	4c0c      	ldr	r4, [pc, #48]	; (8004700 <__libc_init_array+0x44>)
 80046d0:	f000 f820 	bl	8004714 <_init>
 80046d4:	1b64      	subs	r4, r4, r5
 80046d6:	10a4      	asrs	r4, r4, #2
 80046d8:	2600      	movs	r6, #0
 80046da:	42a6      	cmp	r6, r4
 80046dc:	d105      	bne.n	80046ea <__libc_init_array+0x2e>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e4:	4798      	blx	r3
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7ee      	b.n	80046c8 <__libc_init_array+0xc>
 80046ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ee:	4798      	blx	r3
 80046f0:	3601      	adds	r6, #1
 80046f2:	e7f2      	b.n	80046da <__libc_init_array+0x1e>
 80046f4:	0800479c 	.word	0x0800479c
 80046f8:	0800479c 	.word	0x0800479c
 80046fc:	0800479c 	.word	0x0800479c
 8004700:	080047a0 	.word	0x080047a0

08004704 <memset>:
 8004704:	4402      	add	r2, r0
 8004706:	4603      	mov	r3, r0
 8004708:	4293      	cmp	r3, r2
 800470a:	d100      	bne.n	800470e <memset+0xa>
 800470c:	4770      	bx	lr
 800470e:	f803 1b01 	strb.w	r1, [r3], #1
 8004712:	e7f9      	b.n	8004708 <memset+0x4>

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
